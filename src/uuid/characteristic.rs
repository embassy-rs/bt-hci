//! UUIDs for the characteristic module.

// This file is auto-generated by the update_uuids application.
// Based on https://bitbucket.org/bluetooth-SIG/public.git
// Commit hash: 22c4a7a751fe51de707be6d294adb0d115e86897

use super::BluetoothUuid16;

/// Bluetooth characteristic UUID.
///
/// `0x2a00` Device Name
pub const DEVICE_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2a00);

/// Bluetooth characteristic UUID.
///
/// `0x2a01` Appearance
pub const APPEARANCE: BluetoothUuid16 = BluetoothUuid16::new(0x2a01);

/// Bluetooth characteristic UUID.
///
/// `0x2a02` Peripheral Privacy Flag
pub const PERIPHERAL_PRIVACY_FLAG: BluetoothUuid16 = BluetoothUuid16::new(0x2a02);

/// Bluetooth characteristic UUID.
///
/// `0x2a03` Reconnection Address
pub const RECONNECTION_ADDRESS: BluetoothUuid16 = BluetoothUuid16::new(0x2a03);

/// Bluetooth characteristic UUID.
///
/// `0x2a04` Peripheral Preferred Connection Parameters
pub const PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS: BluetoothUuid16 = BluetoothUuid16::new(0x2a04);

/// Bluetooth characteristic UUID.
///
/// `0x2a05` Service Changed
pub const SERVICE_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2a05);

/// Bluetooth characteristic UUID.
///
/// `0x2a06` Alert Level
///
/// The Alert Level characteristic is used to represent the level of an alert.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Alert Level |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0x00: No Alert
/// 0x01: Mild Alert
/// 0x02: High Alert
/// 0x03–0xFF: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.alert_level.yaml)
pub const ALERT_LEVEL: BluetoothUuid16 = BluetoothUuid16::new(0x2a06);

/// Bluetooth characteristic UUID.
///
/// `0x2a07` Tx Power Level
///
/// The Tx Power Level characteristic is used to represent the current radiated transmit power level.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Tx Power |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.logarithmic_radio_quantity.decibel
/// Allowed range is -100 to 20.
/// All other values are reserved for future use.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.tx_power_level.yaml)
pub const TX_POWER_LEVEL: BluetoothUuid16 = BluetoothUuid16::new(0x2a07);

/// Bluetooth characteristic UUID.
///
/// `0x2a08` Date Time
///
/// The Date Time characteristic is used to represent date and time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Year |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Year as defined by the Gregorian calendar. Valid range 1582 to 9999. A value of 0 means that the year is not known. All other values are Reserved for Future Use.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Month |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Month of the year as defined by the Gregorian calendar. Valid range 1 (January) to 12 (December). A value of 0 means that the month is not known. All other values are Reserved for Future Use.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Day of the month as defined by the Gregorian calendar. Valid range 1 to 31. A value of 0 means that the day of month is not known. All other values are Reserved for Future Use.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Hours |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Number of hours past midnight. Valid range 0 to 23. All other values are Reserved for Future Use.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minutes |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Number of minutes since the start of the hour. Valid range 0 to 59. All other values are Reserved for Future Use.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Seconds |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Number of seconds since the start of the minute. Valid range 0 to 59. All other values are Reserved for Future Use.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.date_time.yaml)
pub const DATE_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2a08);

/// Bluetooth characteristic UUID.
///
/// `0x2a09` Day of Week
///
/// The Day of Week characteristic is used to represent the day within a seven-day week as specified in ISO 8601 \RefRef{iso_8601`.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day of Week |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Unknown
/// 1: Monday
/// 2: Tuesday
/// 3: Wednesday
/// 4: Thursday
/// 5: Friday
/// 6: Saturday
/// 7: Sunday
/// 8–255: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.day_of_week.yaml)
pub const DAY_OF_WEEK: BluetoothUuid16 = BluetoothUuid16::new(0x2a09);

/// Bluetooth characteristic UUID.
///
/// `0x2a0a` Day Date Time
///
/// The Day Date Time characteristic is used to represent weekday, date, and time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Date Time |
/// | **Type** | struct |
/// | **Size** | 7 |
///
/// ### Description
///
/// Refer to the Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day of Week |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Day of Week characteristic in `sec:org.bluetooth.characteristic.day_of_week`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.day_date_time.yaml)
pub const DAY_DATE_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2a0a);

/// Bluetooth characteristic UUID.
///
/// `0x2a0c` Exact Time 256
///
/// The Exact Time 256 characteristic is used to represent the day, date, and time, including fractions of seconds.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day Date Time |
/// | **Type** | struct |
/// | **Size** | 8 |
///
/// ### Description
///
/// Refer to the Day Date Time characteristic in `sec:org.bluetooth.characteristic.day_date_time`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fractions256 |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// The number of 1/256 fractions of a second. Valid range 0–255.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.exact_time_256.yaml)
pub const EXACT_TIME_256: BluetoothUuid16 = BluetoothUuid16::new(0x2a0c);

/// Bluetooth characteristic UUID.
///
/// `0x2a0d` DST Offset
///
/// The DST Offset characteristic is used to represent daylight saving time information associated with time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | DST Offset |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Standard Time
/// 2: Half an hour Daylight Time (+ 0.5h)
/// 4: Daylight Time (+ 1h)
/// 8: Double Daylight Time (+ 2h)
/// 255: DST offset unknown
/// All other values: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.dst_offset.yaml)
pub const DST_OFFSET: BluetoothUuid16 = BluetoothUuid16::new(0x2a0d);

/// Bluetooth characteristic UUID.
///
/// `0x2a0e` Time Zone
///
/// The Time Zone characteristic is used to represent the time difference in 15-minute increments between local standard time and UTC.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Zone |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// This field represents the offset from UTC in number of 15-minute increments.
/// Valid range from -48 to +56.
/// A value of -128 means that the time zone offset is not known.
/// All other values are Reserved for Future Use.
/// The offset defined in this characteristic is constant regardless of whether daylight savings is in effect.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_zone.yaml)
pub const TIME_ZONE: BluetoothUuid16 = BluetoothUuid16::new(0x2a0e);

/// Bluetooth characteristic UUID.
///
/// `0x2a0f` Local Time Information
///
/// The Local Time Information characteristic is used to represent the relation (offset) between local time and UTC. It contains time zone and Daylight Savings Time (DST) offset information.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Zone |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Zone characteristic in `sec:org.bluetooth.characteristic.time_zone`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | DST Offset |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to DST Offset characteristic in `sec:org.bluetooth.characteristic.dst_offset`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.local_time_information.yaml)
pub const LOCAL_TIME_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a0f);

/// Bluetooth characteristic UUID.
///
/// `0x2a11` Time with DST
///
/// The Time with DST characteristic is used to represent information about a DST change event.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Date Time |
/// | **Type** | struct |
/// | **Size** | 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | DST Offset |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to DST Offset characteristic in `sec:org.bluetooth.characteristic.dst_offset`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_with_dst.yaml)
pub const TIME_WITH_DST: BluetoothUuid16 = BluetoothUuid16::new(0x2a11);

/// Bluetooth characteristic UUID.
///
/// `0x2a12` Time Accuracy
///
/// The Time Accuracy characteristic is used to represent the accuracy (drift) of time information compared to a reference time source.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Accuracy |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.time.second
/// Represented values: M = 1, d = 0, b = -3
/// This field represents accuracy (drift) of time information in steps of 1/8 of a second (125ms) compared to a reference time source.
/// Valid range from 0 to 253 (0s to 31.625s).
/// A value of 254 means drift is larger than 31.625s.
/// A value of 255 means drift is unknown.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_accuracy.yaml)
pub const TIME_ACCURACY: BluetoothUuid16 = BluetoothUuid16::new(0x2a12);

/// Bluetooth characteristic UUID.
///
/// `0x2a13` Time Source
///
/// The Time Source characteristic is used to represent the type of time source that is used for reference time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Source |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.time_source/field/time_source_values`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_source.yaml)
pub const TIME_SOURCE: BluetoothUuid16 = BluetoothUuid16::new(0x2a13);

/// Bluetooth characteristic UUID.
///
/// `0x2a14` Reference Time Information
///
/// The Reference Time Information characteristic is used to represent information about the reference time source.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Source |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Source characteristic in `sec:org.bluetooth.characteristic.time_source`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Accuracy |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Accuracy characteristic in `sec:org.bluetooth.characteristic.time_accuracy`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Days Since Update |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Number of days portion of the time span since the last update from the reference.
/// Valid range is 0 to 254 days
/// A value of 255 is used when the time span is greater than or equal to 255 days
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Hours Since Update |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Number of hours portion of the time span since the last update from the reference.
/// Valid range is 0 to 23 hours
/// A value of 255 is used when the time span is greater than or equal to 255 days
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.reference_time_information.yaml)
pub const REFERENCE_TIME_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a14);

/// Bluetooth characteristic UUID.
///
/// `0x2a16` Time Update Control Point
///
/// The Time Update Control Point characteristic is used to enable device-specific procedures related to a time server.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Update Control Point |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 1: Get Reference Update
/// 2: Cancel Reference Update
/// All other values: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_update_control_point.yaml)
pub const TIME_UPDATE_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a16);

/// Bluetooth characteristic UUID.
///
/// `0x2a17` Time Update State
///
/// The Time Update State characteristic is used to represent the status of the time update process and the result of the last update in a time server.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Current State |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Idle
/// 1: Update Pending
/// 2–255: Reserved for Future Use
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Result |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Successful
/// 1: Cancelled
/// 2: No connection to reference
/// 3: Reference responded with an error
/// 4: Timeout
/// 5: Update not attempted after reset
/// 6–255: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_update_state.yaml)
pub const TIME_UPDATE_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2a17);

/// Bluetooth characteristic UUID.
///
/// `0x2a18` Glucose Measurement
///
/// The Glucose Measurement characteristic is used to represent data related to a glucose measurement record.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sequence Number |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Contains a sequence number of the record. It is used to number a sequence of measurements as defined by the service.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Base Time |
/// | **Type** | struct |
/// | **Size** | 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Offset |
/// | **Type** | int16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Specifies the time difference from the value of the Base Time field.
/// See `sec:org.bluetooth.characteristic.glucose_measurement/field/time_offset`
/// unit: org.bluetooth.unit.time.minute
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Glucose Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// If bit 2 of Flags field is set to 0,
/// unit: org.bluetooth.unit.mass_density.kilogram_per_liter
/// If bit 2 of Flags field is set to 1,
/// unit: org.bluetooth.unit.mass_density.mole_per_litre
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Type-Sample Location |
/// | **Type** | struct |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement/field/type-sample_location`
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensor Status Annunciation |
/// | **Type** | boolean16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement/field/sensor_status_annunciation`
/// Present if bit 3 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.glucose_measurement.yaml)
pub const GLUCOSE_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a18);

/// Bluetooth characteristic UUID.
///
/// `0x2a19` Battery Level
///
/// The Battery Level characteristic is used to represent the charge level of a battery.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Level |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage.
/// Allowed range is 0 to 100.
/// 100% represents fully charged; 0% represents fully discharged.
/// All other values are reserved for future use.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_level.yaml)
pub const BATTERY_LEVEL: BluetoothUuid16 = BluetoothUuid16::new(0x2a19);

/// Bluetooth characteristic UUID.
///
/// `0x2a1c` Temperature Measurement
///
/// The Temperature Measurement characteristic is used to represent data related to a temperature measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.temperature_measurement/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature Measurement Value (Celsius) |
/// | **Type** | medfloat32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// This field contains a measurement value.
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature Measurement Value (Fahrenheit) |
/// | **Type** | medfloat32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// This field contains a measurement value.
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit.
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature Type |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// The format of this field is the same as the format of the Temperature Type characteristic in `sec:org.bluetooth.characteristic.temperature_type`.
/// Present if bit 2 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_measurement.yaml)
pub const TEMPERATURE_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a1c);

/// Bluetooth characteristic UUID.
///
/// `0x2a1d` Temperature Type
///
/// The Temperature Type characteristic is used to represent the location of a temperature measurement. These values correspond to the Temperature Type descriptions used in IEEE 11073-10408-2008 \RefRef{ieee_11073_10408`.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature Type Description |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.temperature_type/field/temperature_text_description`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_type.yaml)
pub const TEMPERATURE_TYPE: BluetoothUuid16 = BluetoothUuid16::new(0x2a1d);

/// Bluetooth characteristic UUID.
///
/// `0x2a1e` Intermediate Temperature
///
/// The Intermediate Temperature characteristic is used to send intermediate temperature values to a device for display purposes while a measurement is in progress. The Intermediate Temperature characteristic has the same format as the Temperature Measurement characteristic in `sec:org.bluetooth.characteristic.temperature_measurement` except that, due to a different context, the Measurement Value field is referred to as the Intermediate Temperature field.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.intermediate_temperature/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Temperature (Celsius) |
/// | **Type** | medfloat32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// This field contains a measurement value.
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Temperature (Fahrenheit) |
/// | **Type** | medfloat32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// This field contains a measurement value.
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit.
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature Type |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// The format of this field is the same as the format of the Temperature Type characteristic in `sec:org.bluetooth.characteristic.temperature_type`.
/// Present if bit 2 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.intermediate_temperature.yaml)
pub const INTERMEDIATE_TEMPERATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a1e);

/// Bluetooth characteristic UUID.
///
/// `0x2a21` Measurement Interval
///
/// The Measurement Interval characteristic is used to represent the time between measurements.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Measurement Interval |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.measurement_interval/field/measurement_interval`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.measurement_interval.yaml)
pub const MEASUREMENT_INTERVAL: BluetoothUuid16 = BluetoothUuid16::new(0x2a21);

/// Bluetooth characteristic UUID.
///
/// `0x2a22` Boot Keyboard Input Report
pub const BOOT_KEYBOARD_INPUT_REPORT: BluetoothUuid16 = BluetoothUuid16::new(0x2a22);

/// Bluetooth characteristic UUID.
///
/// `0x2a23` System ID
///
/// The System ID characteristic is used to represent an extended unique identifier (EUI) of the system implementing the service that contains this characteristic.
/// This 64-bit structure is an EUI-64 which consists of an Organizationally Unique Identifier (OUI) concatenated with a manufacturer-defined identifier. The OUI is issued by the IEEE Registration Authority (RA) \RefRef{ieee_registration` and should be used in accordance with the guidelines in \RefRef{ieee_tutorial`. Supported lengths for IEEE-issued OUIs include 24 and 36 bits. In those cases, the remaining least significant 40 or 28 bits are manufacturer assigned.
/// A Bluetooth Device Address is an EUI-48, is 48 bits in length, and can be based on an OUI as well, but this is not required. See Core Spec, volume 2, part B, section 1.2. Historically an EUI-48 could be mapped to an EUI-64 by inserting either the value 0xFFFE or the value 0xFF-FF in the middle of the 6-octet EUI-48. This mapping is deprecated.
/// Note that the order of transmission of the EUI-64 octets in a Characteristic is LSO-MSO and also the bit order is little endian. In the System ID characteristic the uint64 starts with the manufacturer-defined identifier, whereas the representation of an EUI-64 in the IEEE-RA guidelines is MSO-LSO, starts with the OUI, and uses the big endian bit order.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | EUI-64 |
/// | **Type** | uint64 |
/// | **Size** | 64 |
///
/// ### Description
///
/// An EUI-64 assigned according to the guidelines of the IEEE-RA.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.system_id.yaml)
pub const SYSTEM_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2a23);

/// Bluetooth characteristic UUID.
///
/// `0x2a24` Model Number String
///
/// The Model Number String characteristic is used to represent the model number assigned by the device vendor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Model Number |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.model_number_string.yaml)
pub const MODEL_NUMBER_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a24);

/// Bluetooth characteristic UUID.
///
/// `0x2a25` Serial Number String
///
/// The Serial Number String characteristic is used to represent the serial number for a device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Serial Number |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.serial_number_string.yaml)
pub const SERIAL_NUMBER_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a25);

/// Bluetooth characteristic UUID.
///
/// `0x2a26` Firmware Revision String
///
/// The Firmware Revision String characteristic is used to represent the revision of the firmware within the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Firmware Revision |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.firmware_revision_string.yaml)
pub const FIRMWARE_REVISION_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a26);

/// Bluetooth characteristic UUID.
///
/// `0x2a27` Hardware Revision String
///
/// The Hardware Revision String characteristic is used to represent the hardware revision for the hardware within the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Hardware Revision |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.hardware_revision_string.yaml)
pub const HARDWARE_REVISION_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a27);

/// Bluetooth characteristic UUID.
///
/// `0x2a28` Software Revision String
///
/// The Software Revision String characteristic is used to represent the revision of the software within the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Software Revision |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.software_revision_string.yaml)
pub const SOFTWARE_REVISION_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a28);

/// Bluetooth characteristic UUID.
///
/// `0x2a29` Manufacturer Name String
///
/// The Manufacturer Name String characteristic is used to represent the name of the manufacturer of the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Manufacturer Name |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.manufacturer_name_string.yaml)
pub const MANUFACTURER_NAME_STRING: BluetoothUuid16 = BluetoothUuid16::new(0x2a29);

/// Bluetooth characteristic UUID.
///
/// `0x2a2a` IEEE 11073-20601 Regulatory Certification Data List
///
/// The IEEE 11073-20601 Regulatory Certification Data List characteristic is used to represent regulatory and certification information for a product in a list defined in IEEE 11073-20601 \RefRef{ieee_11073_20601`.
/// The content of this characteristic is determined by the authorizing organization that provides certifications.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | IEEE 11073-20601 Regulatory Certification Data List |
/// | **Type** | struct |
/// | **Size** | variable |
///
/// ### Description
///
/// Refer to 11073-20601 \RefRef{ieee_11073_20601` or Continua Design Guidelines \RefRef{continua_design_guidelines` for more information on the format of this list
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ieee_11073-20601_regulatory_certification_data_list.yaml)
pub const IEEE_11073_20601_REGULATORY_CERTIFICATION_DATA_LIST: BluetoothUuid16 = BluetoothUuid16::new(0x2a2a);

/// Bluetooth characteristic UUID.
///
/// `0x2a2b` Current Time
///
/// The Current Time characteristic is used to represent the exact time and the reason for adjustment.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Exact Time 256 |
/// | **Type** | struct |
/// | **Size** | 9 |
///
/// ### Description
///
/// Refer to the Exact Time 256 characteristic in `sec:org.bluetooth.characteristic.exact_time_256`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Adjust Reason |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// This field represents reason(s) for adjusting time.
/// 0: Manual Time Update
/// 1: External Reference Time Update
/// 2: Change of Time Zone
/// 3: Change of DST
/// 4–7: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.current_time.yaml)
pub const CURRENT_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2a2b);

/// Bluetooth characteristic UUID.
///
/// `0x2a2c` Magnetic Declination
///
/// The Magnetic Declination characteristic is used to represent the magnetic declination. The magnetic declination is the angle on the horizontal plane between the direction of True North (geographic) and the direction of Magnetic North, measured clockwise from True North to Magnetic North.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Magnetic Declination |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree. Minimum value: 0 Maximum value: 359.99
/// Represented values: M = 1, d = -2, b = 0
/// Unit is degrees with a resolution of 0.01 degrees.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.magnetic_declination.yaml)
pub const MAGNETIC_DECLINATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a2c);

/// Bluetooth characteristic UUID.
///
/// `0x2a31` Scan Refresh
pub const SCAN_REFRESH: BluetoothUuid16 = BluetoothUuid16::new(0x2a31);

/// Bluetooth characteristic UUID.
///
/// `0x2a32` Boot Keyboard Output Report
pub const BOOT_KEYBOARD_OUTPUT_REPORT: BluetoothUuid16 = BluetoothUuid16::new(0x2a32);

/// Bluetooth characteristic UUID.
///
/// `0x2a33` Boot Mouse Input Report
pub const BOOT_MOUSE_INPUT_REPORT: BluetoothUuid16 = BluetoothUuid16::new(0x2a33);

/// Bluetooth characteristic UUID.
///
/// `0x2a34` Glucose Measurement Context
///
/// The Glucose Measurement Context characteristic is used to represent context information associated with a glucose measurement record.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sequence Number |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Contains the sequence number of the corresponding Glucose Measurement as defined by the service.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Extended Flags |
/// | **Type** | boolean8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/extended_flags`
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Carbohydrate ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/carbohydrate_id`
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Carbohydrate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.mass.kilogram
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Meal |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/meal`
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Tester-Health |
/// | **Type** | struct |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/tester-health`
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Exercise Duration |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/exercise_duration`
/// Unit: org.bluetooth.unit.time.second
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Exercise Intensity |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.percentage
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Medication ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_measurement_context/field/medication_id`
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Medication |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// If bit 5 of Flags field is set to 0,
/// Unit: org.bluetooth.unit.mass.kilogram
/// If bit 5 of Flags field is set to 1,
/// Unit: org.bluetooth.unit.volume.litre
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | HbA1c |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.percentage
/// Present if bit 6 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.glucose_measurement_context.yaml)
pub const GLUCOSE_MEASUREMENT_CONTEXT: BluetoothUuid16 = BluetoothUuid16::new(0x2a34);

/// Bluetooth characteristic UUID.
///
/// `0x2a35` Blood Pressure Measurement
///
/// The Blood Pressure Measurement characteristic is used to represent blood pressure measurement data.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Systolic (mmHg) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.pressure.millimetre_of_mercury
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Diastolic (mmHg) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.pressure.millimetre_of_mercury
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Mean Arterial Pressure (mmHg) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.pressure.millimetre_of_mercury
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Systolic (kPa) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.pressure.pascal;
/// M = 1, d = 3, and b = 0
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Diastolic (kPa) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.pressure.pascal;
/// M = 1, d = 3, and b = 0
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value - Mean Arterial Pressure (kPa) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.pressure.pascal;
/// M = 1, d = 3, and b = 0
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pulse Rate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/user_id`.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Measurement Status |
/// | **Type** | boolean16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/measurement_status`.
/// Present if bit 4 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.blood_pressure_measurement.yaml)
pub const BLOOD_PRESSURE_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a35);

/// Bluetooth characteristic UUID.
///
/// `0x2a36` Intermediate Cuff Pressure
///
/// The Intermediate Cuff Pressure characteristic is used to send intermediate Cuff Pressure values to a device for display purposes while a measurement is in progress. The Intermediate Cuff Pressure characteristic has the same format as the Blood Pressure Measurement characteristic in `sec:org.bluetooth.characteristic.blood_pressure_measurement`. However, due to a different context, the Blood Pressure Measurement Compound Value field is used for the Intermediate Cuff Pressure Compound Value field and the Systolic sub-field is used for the Current Cuff Pressure sub-field. The Diastolic and Mean Arterial Pressure fields are unused.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.intermediate_cuff_pressure/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Cuff Pressure Compound Value - Current Cuff Pressure (mmHg) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.pressure.millimetre_of_mercury
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Cuff Pressure Compound Value - Current Cuff Pressure (kPa) |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.pressure.pascal;
/// M = 1, d = 3, and b = 0
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Cuff Pressure Compound Value - Diastolic (unused) |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// This subfield is not used and is set to the special value NaN.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Cuff Pressure Compound Value - Mean Arterial Pressure (unused) |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// This subfield is not used and is set to the special value NaN.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pulse Rate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.intermediate_cuff_pressure/field/user_id`.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Measurement Status |
/// | **Type** | boolean16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.intermediate_cuff_pressure/field/measurement_status`.
/// Present if bit 4 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.intermediate_cuff_pressure.yaml)
pub const INTERMEDIATE_CUFF_PRESSURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a36);

/// Bluetooth characteristic UUID.
///
/// `0x2a37` Heart Rate Measurement
///
/// The Heart Rate Measurement characteristic is used to represent data related to a heart rate measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.heart_rate_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate Measurement Value (8 bit resolution) |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate Measurement Value (16 bit resolution) |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Expended |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.joule
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | RR-interval |
/// | **Type** | uint16n |
/// | **Size** | 0 or n*2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.heart_rate_measurement/field/rr-interval`
/// Present if bit 4 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.heart_rate_measurement.yaml)
pub const HEART_RATE_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a37);

/// Bluetooth characteristic UUID.
///
/// `0x2a38` Body Sensor Location
///
/// The Body Sensor Location characteristic is used to represent the location of a sensor on a human body.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Body Sensor Location |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_sensor_location/field/body_sensor_location`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.body_sensor_location.yaml)
pub const BODY_SENSOR_LOCATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a38);

/// Bluetooth characteristic UUID.
///
/// `0x2a39` Heart Rate Control Point
///
/// The Heart Rate Control Point characteristic is used to enable device-specific procedures related to a heart rate sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate Control Point |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.heart_rate_control_point/field/heart_rate_control_point`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.heart_rate_control_point.yaml)
pub const HEART_RATE_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a39);

/// Bluetooth characteristic UUID.
///
/// `0x2a3f` Alert Status
///
/// The Alert Status characteristic is used to represent the status of a phone alert.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Alert Status |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.alert_status/field/alert_status`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.alert_status.yaml)
pub const ALERT_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2a3f);

/// Bluetooth characteristic UUID.
///
/// `0x2a40` Ringer Control Point
///
/// The Ringer Control Point characteristic is used to enable device-specific procedures for a ringer in a phone.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ringer Control Point |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 1: Silent Mode
/// 2: Mute Once
/// 3: Cancel Silent Mode
/// All other values: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ringer_control_point.yaml)
pub const RINGER_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a40);

/// Bluetooth characteristic UUID.
///
/// `0x2a41` Ringer Setting
///
/// The Ringer Setting characteristic is used to represent the setting of the ringer.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ringer Setting |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Ringer Silent
/// 1: Ringer Normal
/// 2–255: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ringer_setting.yaml)
pub const RINGER_SETTING: BluetoothUuid16 = BluetoothUuid16::new(0x2a41);

/// Bluetooth characteristic UUID.
///
/// `0x2a42` Alert Category ID Bit Mask
///
/// The Alert Category ID Bit Mask characteristic is used to represent support for predefined Category IDs.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID Bit Mask |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.alert_category_id_bit_mask/field/category_id_bit_mask`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.alert_category_id_bit_mask.yaml)
pub const ALERT_CATEGORY_ID_BIT_MASK: BluetoothUuid16 = BluetoothUuid16::new(0x2a42);

/// Bluetooth characteristic UUID.
///
/// `0x2a43` Alert Category ID
///
/// The Alert Category ID characteristic is used to represent predefined categories of alerts and messages.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.alert_category_id/field/category_id`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.alert_category_id.yaml)
pub const ALERT_CATEGORY_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2a43);

/// Bluetooth characteristic UUID.
///
/// `0x2a44` Alert Notification Control Point
///
/// The Alert Notification Control Point characteristic is used to enable device-specific procedures related to alert notification.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Command ID |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Enable New Incoming Alert Notification
/// 1: Enable Unread Category Status Notification
/// 2: Disable New Incoming Alert Notification
/// 3: Disable Unread Category Status Notification
/// 4: Notify New Incoming Alert immediately
/// 5: Notify Unread Category Status immediately
/// 6–255: Reserved for Future Use
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// This field shows the target category to which the command ID applies. Refer to `sec:org.bluetooth.characteristic.alert_category_id`, Alert Category ID characteristic.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.alert_notification_control_point.yaml)
pub const ALERT_NOTIFICATION_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a44);

/// Bluetooth characteristic UUID.
///
/// `0x2a45` Unread Alert Status
///
/// The Unread Alert Status characteristic is used to represent the number of unread alerts in the specific category.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Alert Category ID characteristic in `sec:org.bluetooth.characteristic.alert_category_id`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Unread Count |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// This field provides the number of unread alerts in the server.
/// The range is 0–254.
/// The value of 255 means that there are more than 254 unread alerts in the server.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.unread_alert_status.yaml)
pub const UNREAD_ALERT_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2a45);

/// Bluetooth characteristic UUID.
///
/// `0x2a46` New Alert
///
/// The New Alert characteristic is used to represent the category of the alert, how many new alerts of that category have occurred in a device and brief text information for the last alert.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Alert Category ID characteristic in `sec:org.bluetooth.characteristic.alert_category_id`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Number of New Alert |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// This field provides the number of new alerts in the server ranging from 0 to 255.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Text String Information |
/// | **Type** | utf8s |
/// | **Size** | variable - 0–18 |
///
/// ### Description
///
/// This field provides brief text information for the last alert.
/// See `sec:org.bluetooth.characteristic.new_alert/field/text_string_information`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.new_alert.yaml)
pub const NEW_ALERT: BluetoothUuid16 = BluetoothUuid16::new(0x2a46);

/// Bluetooth characteristic UUID.
///
/// `0x2a47` Supported New Alert Category
///
/// The Supported New Alert Category characteristic is used to represent the category that the server supports for a new alert.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID Bit Mask |
/// | **Type** | struct |
/// | **Size** | 1 or 2 |
///
/// ### Description
///
/// Refer to Alert Category ID Bit Mask characteristic in `sec:org.bluetooth.characteristic.alert_category_id_bit_mask`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_new_alert_category.yaml)
pub const SUPPORTED_NEW_ALERT_CATEGORY: BluetoothUuid16 = BluetoothUuid16::new(0x2a47);

/// Bluetooth characteristic UUID.
///
/// `0x2a48` Supported Unread Alert Category
///
/// The Supported Unread Alert Category characteristic is used to represent the category that the server supports for an unread alert.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Category ID Bit Mask |
/// | **Type** | struct |
/// | **Size** | 1 or 2 |
///
/// ### Description
///
/// Refer to Alert Category ID Bit Mask characteristic in `sec:org.bluetooth.characteristic.alert_category_id_bit_mask`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_unread_alert_category.yaml)
pub const SUPPORTED_UNREAD_ALERT_CATEGORY: BluetoothUuid16 = BluetoothUuid16::new(0x2a48);

/// Bluetooth characteristic UUID.
///
/// `0x2a49` Blood Pressure Feature
///
/// The Blood Pressure Feature characteristic is used to represent the supported features of a blood pressure sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Feature |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_feature/field/blood_pressure_feature`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.blood_pressure_feature.yaml)
pub const BLOOD_PRESSURE_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a49);

/// Bluetooth characteristic UUID.
///
/// `0x2a4a` HID Information
pub const HID_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a4a);

/// Bluetooth characteristic UUID.
///
/// `0x2a4b` Report Map
pub const REPORT_MAP: BluetoothUuid16 = BluetoothUuid16::new(0x2a4b);

/// Bluetooth characteristic UUID.
///
/// `0x2a4c` HID Control Point
pub const HID_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a4c);

/// Bluetooth characteristic UUID.
///
/// `0x2a4d` Report
pub const REPORT: BluetoothUuid16 = BluetoothUuid16::new(0x2a4d);

/// Bluetooth characteristic UUID.
///
/// `0x2a4e` Protocol Mode
pub const PROTOCOL_MODE: BluetoothUuid16 = BluetoothUuid16::new(0x2a4e);

/// Bluetooth characteristic UUID.
///
/// `0x2a4f` Scan Interval Window
pub const SCAN_INTERVAL_WINDOW: BluetoothUuid16 = BluetoothUuid16::new(0x2a4f);

/// Bluetooth characteristic UUID.
///
/// `0x2a50` PnP ID
///
/// The PnP ID characteristic is used to represent a set of values that are used to create a device ID value that is unique for this device. These values are used to identify all devices of a given type/model/version using numbers.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Vendor ID Source |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.pnp_id/field/vendor_id_source`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Vendor ID |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Identifies the product vendor from the namespace in the Vendor ID Source
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Product ID |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Manufacturer managed identifier for this product
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Product Version |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Manufacturer managed version for this product
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.pnp_id.yaml)
pub const PNP_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2a50);

/// Bluetooth characteristic UUID.
///
/// `0x2a51` Glucose Feature
///
/// The Glucose Feature characteristic is used to represent the supported features of a glucose sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Glucose Feature |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.glucose_feature/field/glucose_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.glucose_feature.yaml)
pub const GLUCOSE_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a51);

/// Bluetooth characteristic UUID.
///
/// `0x2a52` Record Access Control Point
///
/// The Record Access Control Point is used to enable service-specific procedures for management of a set of data records.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Op Code |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.record_access_control_point/field/op_code`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Operator |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.record_access_control_point/field/op_code` and `sec:org.bluetooth.characteristic.record_access_control_point/field/operator`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Operand |
/// | **Type** | struct |
/// | **Size** | 0-18 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.record_access_control_point/field/op_code`, `sec:org.bluetooth.characteristic.record_access_control_point/field/operator`, and `sec:org.bluetooth.characteristic.record_access_control_point/field/operand`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.record_access_control_point.yaml)
pub const RECORD_ACCESS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a52);

/// Bluetooth characteristic UUID.
///
/// `0x2a53` RSC Measurement
///
/// The RSC Measurement characteristic is used to represent data related to a running speed and cadence (RSC) measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.rsc_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Speed |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.metres_per_second
/// Represented values: M = 1, d = 0, b = -8
/// Unit is 1/256th of a m/s
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Cadence |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is 1/min
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Stride Length |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -2, b = 0
/// Unit is Centimeter
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 m
/// Present if bit 1 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.rsc_measurement.yaml)
pub const RSC_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a53);

/// Bluetooth characteristic UUID.
///
/// `0x2a54` RSC Feature
///
/// The RSC Feature characteristic is used to represent the supported features of a running speed and cadence (RSC) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | RSC Feature |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.rsc_feature/field/rsc_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.rsc_feature.yaml)
pub const RSC_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a54);

/// Bluetooth characteristic UUID.
///
/// `0x2a55` SC Control Point
///
/// The SC Control Point characteristic is used to enable device-specific procedures related to a speed and cadence (SC) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Op Code |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.sc_control_point/field/op_code_and_parameter`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Parameter |
/// | **Type** | struct |
/// | **Size** | 0–18 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.sc_control_point/field/op_code_and_parameter`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sc_control_point.yaml)
pub const SC_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a55);

/// Bluetooth characteristic UUID.
///
/// `0x2a5a` Aggregate
pub const AGGREGATE: BluetoothUuid16 = BluetoothUuid16::new(0x2a5a);

/// Bluetooth characteristic UUID.
///
/// `0x2a5b` CSC Measurement
///
/// The CSC Measurement characteristic is used to represent data related to a cycling speed and cadence (CSC) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.csc_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Wheel Revolution Data |
/// | **Type** | struct |
/// | **Size** | 0 or 6 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.csc_measurement/field/wheel_revolution_data`
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Crank Revolution Data |
/// | **Type** | struct |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.csc_measurement/field/crank_revolution_data`
/// Present if bit 1 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.csc_measurement.yaml)
pub const CSC_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a5b);

/// Bluetooth characteristic UUID.
///
/// `0x2a5c` CSC Feature
///
/// The CSC Feature characteristic is used to represent the supported features of a cycling speed and cadence (CSC) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CSC Feature |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.csc_feature/field/csc_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.csc_feature.yaml)
pub const CSC_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a5c);

/// Bluetooth characteristic UUID.
///
/// `0x2a5d` Sensor Location
///
/// The Sensor Location characteristic is used to represent the location of the sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensor Location |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.sensor_location/field/sensor_location`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sensor_location.yaml)
pub const SENSOR_LOCATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a5d);

/// Bluetooth characteristic UUID.
///
/// `0x2a5e` PLX Spot-Check Measurement
pub const PLX_SPOT_CHECK_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a5e);

/// Bluetooth characteristic UUID.
///
/// `0x2a5f` PLX Continuous Measurement
pub const PLX_CONTINUOUS_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a5f);

/// Bluetooth characteristic UUID.
///
/// `0x2a60` PLX Features
pub const PLX_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2a60);

/// Bluetooth characteristic UUID.
///
/// `0x2a63` Cycling Power Measurement
///
/// The Cycling Power Measurement characteristic is used to represent data related to a cycling power sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Power |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pedal Power Balance |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = 0, b = -1
/// Unit is 1/2 of a percent
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Accumulated Torque |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.moment_of_force.newton_metre
/// Represented values: M = 1, d = 0, b = -5
/// Unit is 1/32 Newton meter
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Wheel Revolution Data |
/// | **Type** | struct |
/// | **Size** | 0 or 6 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/wheel_revolution_data`
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Crank Revolution Data |
/// | **Type** | struct |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/crank_revolution_data`
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Extreme Force Magnitudes |
/// | **Type** | struct |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/extreme_force_magnitudes`
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Extreme Torque Magnitudes |
/// | **Type** | struct |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/extreme_torque_magnitudes`
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Extreme Angles |
/// | **Type** | struct |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/extreme_angles`
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Top Dead Spot Angle |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/top_and_bottom_dead_spot_angles`
/// Unit: org.bluetooth.unit.plane_angle.degree
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Bottom Dead Spot Angle |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_measurement/field/top_and_bottom_dead_spot_angles`
/// Unit: org.bluetooth.unit.plane_angle.degree
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Accumulated Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.energy.joule
/// Represented values: M = 1, d = 3, b = 0
/// Unit is kilojoule
/// Present if bit 11 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cycling_power_measurement.yaml)
pub const CYCLING_POWER_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a63);

/// Bluetooth characteristic UUID.
///
/// `0x2a64` Cycling Power Vector
///
/// The Cycling Power Vector characteristic is used to represent power vector data related to a cycling power sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_vector/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Crank Revolution Data |
/// | **Type** | struct |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_vector/field/crank_revolution_data`
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | First Crank Measurement Angle |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_vector/field/first_crank_measurement_angle`
/// Unit: org.bluetooth.unit.plane_angle.degree
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Force Magnitude Array |
/// | **Type** | sint16 0–9 |
/// | **Size** | 0–18 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.force.newton
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Torque Magnitude Array |
/// | **Type** | sint16 0–9 |
/// | **Size** | 0–18 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.moment_of_force.newton_metre
/// Represented values: M = 1, d = 0, b = -5
/// Unit is 1/32 Newton meter
/// Present if bit 3 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cycling_power_vector.yaml)
pub const CYCLING_POWER_VECTOR: BluetoothUuid16 = BluetoothUuid16::new(0x2a64);

/// Bluetooth characteristic UUID.
///
/// `0x2a65` Cycling Power Feature
///
/// The Cycling Power Feature characteristic is used to represent the supported features of a cycling power sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Cycling Power Feature |
/// | **Type** | boolean32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_feature/field/cycling_power_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cycling_power_feature.yaml)
pub const CYCLING_POWER_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a65);

/// Bluetooth characteristic UUID.
///
/// `0x2a66` Cycling Power Control Point
///
/// The Cycling Power Control Point characteristic is used to enable device-specific procedures related to a cycling power sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Op Code |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_control_point/field/op_code_and_parameter`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Parameter |
/// | **Type** | struct |
/// | **Size** | 0–18 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cycling_power_control_point/field/op_code_and_parameter`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cycling_power_control_point.yaml)
pub const CYCLING_POWER_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a66);

/// Bluetooth characteristic UUID.
///
/// `0x2a67` Location and Speed
///
/// The Location and Speed characteristic is used to represent data related to a location and speed sensor. Note that it is possible for this characteristic to exceed the default LE ATT_MTU size.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.location_and_speed/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.metres_per_second
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a m/s
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 m
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Location - Latitude |
/// | **Type** | sint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -7, b = 0
/// Unit is 1*10\textsuperscript{-7` degrees
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Location - Longitude |
/// | **Type** | sint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -7, b = 0
/// Unit is 1*10\textsuperscript{-7` degrees
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elevation |
/// | **Type** | sint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 m
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heading |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1*10\textsuperscript{-2` degrees
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Rolling Time |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | UTC Time |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`.
/// Present if bit 6 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.location_and_speed.yaml)
pub const LOCATION_AND_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2a67);

/// Bluetooth characteristic UUID.
///
/// `0x2a68` Navigation
///
/// The Navigation characteristic is used to represent data related to a navigation sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.navigation/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Bearing |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1*10\textsuperscript{-2` degrees
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heading |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1*10\textsuperscript{-2` degrees
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 m
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Vertical Distance |
/// | **Type** | sint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 m
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Estimated Time of Arrival |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`.
/// Present if bit 2 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.navigation.yaml)
pub const NAVIGATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a68);

/// Bluetooth characteristic UUID.
///
/// `0x2a69` Position Quality
///
/// The Position Quality characteristic is used to represent data related to the quality of a position measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.position_quality/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Number of Beacons in Solution |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Number of Beacons in View |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time to First Fix |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.time.second
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 seconds
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | EHPE |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 m
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | EVPE |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 m
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | HDOP |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 2, d = -1, b = 0
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | VDOP |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 2, d = -1, b = 0
/// Present if bit 6 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.position_quality.yaml)
pub const POSITION_QUALITY: BluetoothUuid16 = BluetoothUuid16::new(0x2a69);

/// Bluetooth characteristic UUID.
///
/// `0x2a6a` LN Feature
///
/// The LN Feature characteristic is used to represent the supported features of a location and navigation (LN) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | LN Feature |
/// | **Type** | boolean32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.ln_feature/field/ln_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ln_feature.yaml)
pub const LN_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a6a);

/// Bluetooth characteristic UUID.
///
/// `0x2a6b` LN Control Point
///
/// The LN Control Point characteristic is used to enable device-specific procedures related to the exchange of location and navigation (LN) information.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Op Code |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.ln_control_point/field/op_code_and_parameter`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Parameter |
/// | **Type** | struct |
/// | **Size** | 0–18 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.ln_control_point/field/op_code_and_parameter`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ln_control_point.yaml)
pub const LN_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a6b);

/// Bluetooth characteristic UUID.
///
/// `0x2a6c` Elevation
///
/// The Elevation characteristic is used to represent the elevation. The elevation is relative to sea level unless otherwise specified in the service.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elevation |
/// | **Type** | sint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -2, b = 0
/// Unit is in meters with a resolution of 0.01 m.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.elevation.yaml)
pub const ELEVATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a6c);

/// Bluetooth characteristic UUID.
///
/// `0x2a6d` Pressure
///
/// The Pressure characteristic is used to represent pressure.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pressure |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.pressure.pascal
/// Represented values: M = 1, d = -1, b = 0
/// Unit is Pascals with a resolution of 0.1 Pa
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.pressure.yaml)
pub const PRESSURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a6d);

/// Bluetooth characteristic UUID.
///
/// `0x2a6e` Temperature
///
/// The Temperature characteristic is used to represent a temperature.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// Represented values: M = 1, d = -2, b = 0
/// Unit is degrees Celsius with a resolution of 0.01 degrees Celsius.
/// Allowed range is: -273.15 to 327.67.
/// A value of 0x8000 represents "value is not known".
/// All other values are prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature.yaml)
pub const TEMPERATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a6e);

/// Bluetooth characteristic UUID.
///
/// `0x2a6f` Humidity
///
/// The Humidity characteristic is used to represent the humidity.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Humidity |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -2, b = 0
/// Unit is in percent with a resolution of 0.01 percent.
/// Allowed range is: 0.00 to 100.00
/// A value of 0xFFFF represents "value is not known".
/// All other values are prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.humidity.yaml)
pub const HUMIDITY: BluetoothUuid16 = BluetoothUuid16::new(0x2a6f);

/// Bluetooth characteristic UUID.
///
/// `0x2a70` True Wind Speed
///
/// The True Wind Speed characteristic is used to represent the true wind speed.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | True Wind Speed |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.metres_per_second
/// Represented values: M = 1, d = -2, b = 0
/// Unit is in meters per second with a resolution of 0.01 m/s.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.true_wind_speed.yaml)
pub const TRUE_WIND_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2a70);

/// Bluetooth characteristic UUID.
///
/// `0x2a71` True Wind Direction
///
/// The True Wind Direction characteristic is used to represent the true wind direction. Wind direction is reported by the direction from which it originates and is an angle measured clockwise relative to Geographic North. For example, a wind coming from the north is given as 0 degrees, a wind coming from the south is given as 180 degrees, a wind coming from the east is given as 90 degrees, and a wind coming from the west is given as 270 degrees.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | True Wind Direction |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Minimum value: 0
/// Maximum value: 359.99
/// Represented values: M = 1, d = -2, b = 0
/// Unit is degrees with a resolution of 0.01 degrees.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.true_wind_direction.yaml)
pub const TRUE_WIND_DIRECTION: BluetoothUuid16 = BluetoothUuid16::new(0x2a71);

/// Bluetooth characteristic UUID.
///
/// `0x2a72` Apparent Wind Speed
///
/// The Apparent Wind Speed characteristic is used to represent the apparent wind speed. The apparent wind speed is the wind experienced by an observer in motion and is the relative speed of the wind in relation to the observer.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Apparent Wind Speed |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.metres_per_second
/// Represented values: M = 1, d = -2, b = 0
/// Unit is in meters per second with a resolution of 0.01 m/s.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.apparent_wind_speed.yaml)
pub const APPARENT_WIND_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2a72);

/// Bluetooth characteristic UUID.
///
/// `0x2a73` Apparent Wind Direction
///
/// The Apparent Wind Direction characteristic is used to represent the apparent wind direction. The apparent wind direction is the wind experienced by an observer in motion and is the relative direction of the wind in relation to the observer. For example, the apparent wind direction aboard a boat is given in degrees relative to the heading of the boat. The apparent wind direction is reported by the direction from which it appears to originate. For example, an apparent wind coming from a direction that is 45 degrees clockwise relative to the heading of the observer is given as 45 degrees; one that is from a direction 45 degrees anti-clockwise relative to the heading of the observer is given as 315 degrees.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Apparent Wind Direction |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Minimum value: 0
/// Maximum value: 359.99
/// Represented values: M = 1, d = -2, b = 0
/// Unit is degrees with a resolution of 0.01 degrees.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.apparent_wind_direction.yaml)
pub const APPARENT_WIND_DIRECTION: BluetoothUuid16 = BluetoothUuid16::new(0x2a73);

/// Bluetooth characteristic UUID.
///
/// `0x2a74` Gust Factor
///
/// The Gust Factor characteristic is used to represent the gust factor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Gust Factor |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = -1, b = 0
/// The factor has a fixed-point representation, where the actual factor is (attribute value * 0.1).
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.gust_factor.yaml)
pub const GUST_FACTOR: BluetoothUuid16 = BluetoothUuid16::new(0x2a74);

/// Bluetooth characteristic UUID.
///
/// `0x2a75` Pollen Concentration
///
/// The Pollen Concentration characteristic is used to represent the pollen count.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pollen Concentration |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.concentration.count_per_cubic_metre
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.pollen_concentration.yaml)
pub const POLLEN_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2a75);

/// Bluetooth characteristic UUID.
///
/// `0x2a76` UV Index
///
/// The UV Index characteristic is used to represent the UV Index.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | UV Index |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.uv_index.yaml)
pub const UV_INDEX: BluetoothUuid16 = BluetoothUuid16::new(0x2a76);

/// Bluetooth characteristic UUID.
///
/// `0x2a77` Irradiance
///
/// The Irradiance characteristic is used to represent the irradiance, the radiant flux received by a surface per unit area.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Irradiance |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.irradiance.watt_per_square_metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is in watt per square meter with a resolution of 0.1 W/m\textsuperscript{2`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.irradiance.yaml)
pub const IRRADIANCE: BluetoothUuid16 = BluetoothUuid16::new(0x2a77);

/// Bluetooth characteristic UUID.
///
/// `0x2a78` Rainfall
///
/// The Rainfall characteristic is used to represent the amount of rain that has fallen.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Rainfall |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -3, b = 0
/// Unit is meters with a resolution of 1mm
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.rainfall.yaml)
pub const RAINFALL: BluetoothUuid16 = BluetoothUuid16::new(0x2a78);

/// Bluetooth characteristic UUID.
///
/// `0x2a79` Wind Chill
///
/// The Wind Chill characteristic is used to represent the wind chill factor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Wind Chill |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.wind_chill.yaml)
pub const WIND_CHILL: BluetoothUuid16 = BluetoothUuid16::new(0x2a79);

/// Bluetooth characteristic UUID.
///
/// `0x2a7a` Heat Index
///
/// The Heat Index characteristic is used to represent the heat index.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heat Index |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.heat_index.yaml)
pub const HEAT_INDEX: BluetoothUuid16 = BluetoothUuid16::new(0x2a7a);

/// Bluetooth characteristic UUID.
///
/// `0x2a7b` Dew Point
///
/// The Dew Point characteristic is used to represent the dew point.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Dew Point |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// Represented values: M = 1, d = 0, b = 0
/// Unit is in degrees Celsius with a resolution of 1 degree Celsius.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.dew_point.yaml)
pub const DEW_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a7b);

/// Bluetooth characteristic UUID.
///
/// `0x2a7d` Descriptor Value Changed
pub const DESCRIPTOR_VALUE_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2a7d);

/// Bluetooth characteristic UUID.
///
/// `0x2a7e` Aerobic Heart Rate Lower Limit
///
/// The Aerobic Heart Rate Lower Limit characteristic is used to represent the desired lower limit of the heart rate, where a user enhances his or her endurance while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Aerobic Heart Rate Lower Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.aerobic_heart_rate_lower_limit.yaml)
pub const AEROBIC_HEART_RATE_LOWER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a7e);

/// Bluetooth characteristic UUID.
///
/// `0x2a7f` Aerobic Threshold
///
/// The Aerobic Threshold characteristic is used to represent the aerobic threshold of a user. Aerobic Threshold and Anaerobic Threshold characteristics together with the Sport Type For Aerobic And Anaerobic Thresholds characteristic describe the metabolic thresholds of the user. The Sport Type For Aerobic And Anaerobic Thresholds characteristic value identifies how the measurement was performed.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Aerobic Threshold |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.aerobic_threshold.yaml)
pub const AEROBIC_THRESHOLD: BluetoothUuid16 = BluetoothUuid16::new(0x2a7f);

/// Bluetooth characteristic UUID.
///
/// `0x2a80` Age
///
/// The Age characteristic is used to represent the age of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Age |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.year
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.age.yaml)
pub const AGE: BluetoothUuid16 = BluetoothUuid16::new(0x2a80);

/// Bluetooth characteristic UUID.
///
/// `0x2a81` Anaerobic Heart Rate Lower Limit
///
/// The Anaerobic Heart Rate Lower Limit characteristic is used to represent the desired lower limit of the heart rate, where a user enhances his or her anaerobic tolerance while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Anaerobic Heart Rate Lower Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.anaerobic_heart_rate_lower_limit.yaml)
pub const ANAEROBIC_HEART_RATE_LOWER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a81);

/// Bluetooth characteristic UUID.
///
/// `0x2a82` Anaerobic Heart Rate Upper Limit
///
/// The Anaerobic Heart Rate Upper Limit characteristic is used to represent the desired upper limit of the heart rate, where a user enhances his or her anaerobic tolerance while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Anaerobic Heart Rate Upper Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.anaerobic_heart_rate_upper_limit.yaml)
pub const ANAEROBIC_HEART_RATE_UPPER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a82);

/// Bluetooth characteristic UUID.
///
/// `0x2a83` Anaerobic Threshold
///
/// The Anaerobic Threshold characteristic is used to represent the anaerobic threshold of a user. The Aerobic Threshold and Anaerobic Threshold characteristics together with the Sport Type For Aerobic And Anaerobic Thresholds characteristic describe the metabolic thresholds of the user. The Sport Type For Aerobic And Anaerobic Thresholds characteristic value identifies how the measurement was performed.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Anaerobic Threshold |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.anaerobic_threshold.yaml)
pub const ANAEROBIC_THRESHOLD: BluetoothUuid16 = BluetoothUuid16::new(0x2a83);

/// Bluetooth characteristic UUID.
///
/// `0x2a84` Aerobic Heart Rate Upper Limit
///
/// The Aerobic Heart Rate Upper Limit characteristic is used to represent the desired upper limit of the heart rate, where a user enhances his or her endurance while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Aerobic Heart Rate Upper Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.aerobic_heart_rate_upper_limit.yaml)
pub const AEROBIC_HEART_RATE_UPPER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a84);

/// Bluetooth characteristic UUID.
///
/// `0x2a85` Date of Birth
///
/// The Date of Birth characteristic is used to represent the date of birth of a user as defined by the Gregorian calendar.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Year |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.year
/// The Year is an integer value.
/// Minimum value: 1582
/// Maximum value: 9999
/// In addition to the above range, a special value is defined: 0 = Year is not known
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Month |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.date_of_birth/field/month`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.day
/// The Day is an integer value.
/// Minimum value: 1
/// Maximum value: 31
/// In addition to the above range, a special value is defined: 0 = Day of Month is not known
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.date_of_birth.yaml)
pub const DATE_OF_BIRTH: BluetoothUuid16 = BluetoothUuid16::new(0x2a85);

/// Bluetooth characteristic UUID.
///
/// `0x2a86` Date of Threshold Assessment
///
/// The Date of Threshold Assessment characteristic is used to represent the date of threshold assessment of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Year |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Year as defined by the Gregorian calendar.
/// Unit; org.bluetooth.unit.time.year
/// The Year is an integer value.
/// Minimum value: 1582
/// Maximum value: 9999
/// In addition to the above range, a special value is defined: 0 = Year is not known
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Month |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.date_of_threshold_assessment/field/month`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Day |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.day
/// The Day is an integer value.
/// Minimum value: 1
/// Maximum value: 31
/// In addition to the above range, a special value is defined: 0 = Day of Month is not known
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.date_of_threshold_assessment.yaml)
pub const DATE_OF_THRESHOLD_ASSESSMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a86);

/// Bluetooth characteristic UUID.
///
/// `0x2a87` Email Address
///
/// The Email Address characteristic is used to represent the email address of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Email Address |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.email_address.yaml)
pub const EMAIL_ADDRESS: BluetoothUuid16 = BluetoothUuid16::new(0x2a87);

/// Bluetooth characteristic UUID.
///
/// `0x2a88` Fat Burn Heart Rate Lower Limit
///
/// The Fat Burn Heart Rate Lower Limit characteristic is used to represent the desired lower limit of the heart rate, where a user maximizes the fat burn while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fat Burn Heart Rate Lower Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fat_burn_heart_rate_lower_limit.yaml)
pub const FAT_BURN_HEART_RATE_LOWER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a88);

/// Bluetooth characteristic UUID.
///
/// `0x2a89` Fat Burn Heart Rate Upper Limit
///
/// The Fat Burn Heart Rate Upper Limit characteristic is used to represent the desired upper limit of the heart rate, where a user maximizes the fat burn while exercising.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fat Burn Heart Rate Upper Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fat_burn_heart_rate_upper_limit.yaml)
pub const FAT_BURN_HEART_RATE_UPPER_LIMIT: BluetoothUuid16 = BluetoothUuid16::new(0x2a89);

/// Bluetooth characteristic UUID.
///
/// `0x2a8a` First Name
///
/// The First Name characteristic is used to represent the first name of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | First Name |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.first_name.yaml)
pub const FIRST_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2a8a);

/// Bluetooth characteristic UUID.
///
/// `0x2a8b` Five Zone Heart Rate Limits
///
/// The Five Zone Heart Rate Limits characteristic is used to represent the limits between the heart rate zones for the five-zone heart rate definition (Maximum, Hard, Moderate, Light, and Very Light) of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Five Zone Heart Rate Limits - Very Light / Light Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Five Zone Heart Rate Limits - Light / Moderate Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Five Zone Heart Rate Limits - Moderate / Hard Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Five Zone Heart Rate Limits - Hard / Maximum Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.five_zone_heart_rate_limits.yaml)
pub const FIVE_ZONE_HEART_RATE_LIMITS: BluetoothUuid16 = BluetoothUuid16::new(0x2a8b);

/// Bluetooth characteristic UUID.
///
/// `0x2a8c` Gender
///
/// The Gender characteristic is used to represent the gender of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Gender |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// 0: Male
/// 1: Female
/// 2: Unspecified
/// 3–255: Reserved for Future Use
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.gender.yaml)
pub const GENDER: BluetoothUuid16 = BluetoothUuid16::new(0x2a8c);

/// Bluetooth characteristic UUID.
///
/// `0x2a8d` Heart Rate Max
///
/// The Heart Rate Max characteristic is used to represent the maximum heart rate of a user which the user intends not to exceed.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate Max |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.heart_rate_max.yaml)
pub const HEART_RATE_MAX: BluetoothUuid16 = BluetoothUuid16::new(0x2a8d);

/// Bluetooth characteristic UUID.
///
/// `0x2a8e` Height
///
/// The Height characteristic is used to represent the height of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Height |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 0.01 meter.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.height.yaml)
pub const HEIGHT: BluetoothUuid16 = BluetoothUuid16::new(0x2a8e);

/// Bluetooth characteristic UUID.
///
/// `0x2a8f` Hip Circumference
///
/// The Hip Circumference characteristic is used to represent the hip circumference measurement of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Hip Circumference |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 0.01 meter.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.hip_circumference.yaml)
pub const HIP_CIRCUMFERENCE: BluetoothUuid16 = BluetoothUuid16::new(0x2a8f);

/// Bluetooth characteristic UUID.
///
/// `0x2a90` Last Name
///
/// The Last Name characteristic is used to represent the last name of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Last Name |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.last_name.yaml)
pub const LAST_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2a90);

/// Bluetooth characteristic UUID.
///
/// `0x2a91` Maximum Recommended Heart Rate
///
/// The Maximum Recommended Heart Rate characteristic is used to represent the maximum recommended heart rate of a user. Maximum recommended heart rate is a threshold that is intended to be set to limit exertion. The maximum recommended heart rate is less than or equal to the maximum heart rate recommended for a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Recommended Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.maximum_recommended_heart_rate.yaml)
pub const MAXIMUM_RECOMMENDED_HEART_RATE: BluetoothUuid16 = BluetoothUuid16::new(0x2a91);

/// Bluetooth characteristic UUID.
///
/// `0x2a92` Resting Heart Rate
///
/// The Resting Heart Rate characteristic is used to represent the resting heart rate of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Resting Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.resting_heart_rate.yaml)
pub const RESTING_HEART_RATE: BluetoothUuid16 = BluetoothUuid16::new(0x2a92);

/// Bluetooth characteristic UUID.
///
/// `0x2a93` Sport Type for Aerobic and Anaerobic Thresholds
///
/// The Sport Type for Aerobic and Anaerobic Thresholds characteristic is used to represent the sport type applicable to aerobic and anaerobic thresholds for a user. The value identifies how the measurement(s) were performed. The Aerobic Threshold and Anaerobic Threshold characteristics together with the Sport Type For Aerobic And Anaerobic Thresholds characteristic describe the metabolic thresholds of the user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sport Type for Aerobic and Anaerobic Thresholds |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds/field/sport_type_for_aerobic_and_anaerobic_thresholds`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sport_type_for_aerobic_and_anaerobic_thresholds.yaml)
pub const SPORT_TYPE_FOR_AEROBIC_AND_ANAEROBIC_THRESHOLDS: BluetoothUuid16 = BluetoothUuid16::new(0x2a93);

/// Bluetooth characteristic UUID.
///
/// `0x2a94` Three Zone Heart Rate Limits
///
/// The Three Zone Heart Rate Limits characteristic is used to represent the limits between the heart rate zones for the three-zone heart rate definition (Hard, Moderate, and Light) of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Three Zone Heart Rate Limits - Light (Fat burn) / Moderate (Aerobic) Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Three Zone Heart Rate Limits - Moderate (Aerobic) / Hard (Anaerobic) Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.three_zone_heart_rate_limits.yaml)
pub const THREE_ZONE_HEART_RATE_LIMITS: BluetoothUuid16 = BluetoothUuid16::new(0x2a94);

/// Bluetooth characteristic UUID.
///
/// `0x2a95` Two Zone Heart Rate Limits
///
/// The Two Zone Heart Rate Limits characteristic is used to represent the heart rate limit between the heart rate zones for the two-zone heart rate definition (Fitness and Fat Burn) of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Two Zone Heart Rate Limit - Fat Burn / Fitness Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.two_zone_heart_rate_limits.yaml)
pub const TWO_ZONE_HEART_RATE_LIMITS: BluetoothUuid16 = BluetoothUuid16::new(0x2a95);

/// Bluetooth characteristic UUID.
///
/// `0x2a96` VO2 Max
///
/// The VO2 Max characteristic is used to represent the maximal oxygen uptake of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | VO2 Max |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.vo2_max.yaml)
pub const VO2_MAX: BluetoothUuid16 = BluetoothUuid16::new(0x2a96);

/// Bluetooth characteristic UUID.
///
/// `0x2a97` Waist Circumference
///
/// The Waist Circumference characteristic is used to represent the waist measurement of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Waist Circumference |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 0.01 meter.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.waist_circumference.yaml)
pub const WAIST_CIRCUMFERENCE: BluetoothUuid16 = BluetoothUuid16::new(0x2a97);

/// Bluetooth characteristic UUID.
///
/// `0x2a98` Weight
///
/// The Weight characteristic is used to represent the weight of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Weight |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.mass.kilogram
/// Represented values: M = 5, d = -3, b = 0
/// Unit is 0.005 kilogram.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.weight.yaml)
pub const WEIGHT: BluetoothUuid16 = BluetoothUuid16::new(0x2a98);

/// Bluetooth characteristic UUID.
///
/// `0x2a99` Database Change Increment
///
/// The Database Change Increment characteristic is used to represent a count of the changes made to a set of related characteristic(s) as defined by the containing service. It is used to determine the need to synchronize this set between a Server and a Client.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Database Change Increment |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// The Database Change Increment is a unitless integer value.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.database_change_increment.yaml)
pub const DATABASE_CHANGE_INCREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a99);

/// Bluetooth characteristic UUID.
///
/// `0x2a9a` User Index
///
/// The User Index characteristic is used to represent the index of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User Index |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.user_index/field/user_index`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.user_index.yaml)
pub const USER_INDEX: BluetoothUuid16 = BluetoothUuid16::new(0x2a9a);

/// Bluetooth characteristic UUID.
///
/// `0x2a9b` Body Composition Feature
///
/// The Body Composition Feature characteristic is used to represent the supported features of a body composition sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Body Composition Feature |
/// | **Type** | boolean32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_feature/field/body_composition_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.body_composition_feature.yaml)
pub const BODY_COMPOSITION_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a9b);

/// Bluetooth characteristic UUID.
///
/// `0x2a9c` Body Composition Measurement
///
/// The Body Composition Measurement characteristic is used to represent data related to a body composition measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Body Fat Percentage |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to the Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/user_id`
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Basal Metabolism |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.energy.joule
/// Represented values: M = 1, d = 3, b = 0
/// Unit is kilojoules
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Muscle Percentage |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Muscle Mass |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/muscle_mass`
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fat Free Mass |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/fat_free_mass`
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Soft Lean Mass |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/soft_lean_mass`
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Body Water Mass |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/body_water_mass`
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Impedance |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.electric_resistance.ohm
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/10 of an Ohm
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Weight |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/weight`
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Height |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.body_composition_measurement/field/height`
/// Present if bit 11 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.body_composition_measurement.yaml)
pub const BODY_COMPOSITION_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a9c);

/// Bluetooth characteristic UUID.
///
/// `0x2a9d` Weight Measurement
///
/// The Weight Measurement characteristic is used to represent data related to a weight measurement.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.weight_measurement/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Weight |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// This field is in kilograms with resolution 0.005 if the bit 0 of the Flag field is 0 or in pounds with a resolution of 0.01 if the bit 0 of the Flag field is 1.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | struct |
/// | **Size** | 0 or 7 |
///
/// ### Description
///
/// Refer to Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// The special value of 0xFF for User ID represents "unknown user".
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | BMI |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit is 0.1 kg/m2 or org.bluetooth.unit.kilogram_per_square_metre
/// Represented values: M = 1, d = -1, b = 0.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Height |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// This field is in meters with a resolution of 0.001 if the bit 0 of the Flag field is 0 or in inches with a resolution of 0.1 if the bit 0 of the Flag field is 1.
/// Present if bit 3 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.weight_measurement.yaml)
pub const WEIGHT_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2a9d);

/// Bluetooth characteristic UUID.
///
/// `0x2a9e` Weight Scale Feature
///
/// The Weight Scale Feature characteristic is used to represent the supported features of a weight scale.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Weight Scale Feature |
/// | **Type** | boolean32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.weight_scale_feature/field/weight_scale_feature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.weight_scale_feature.yaml)
pub const WEIGHT_SCALE_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2a9e);

/// Bluetooth characteristic UUID.
///
/// `0x2a9f` User Control Point
pub const USER_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2a9f);

/// Bluetooth characteristic UUID.
///
/// `0x2aa0` Magnetic Flux Density - 2D
pub const MAGNETIC_FLUX_DENSITY_2D: BluetoothUuid16 = BluetoothUuid16::new(0x2aa0);

/// Bluetooth characteristic UUID.
///
/// `0x2aa1` Magnetic Flux Density - 3D
pub const MAGNETIC_FLUX_DENSITY_3D: BluetoothUuid16 = BluetoothUuid16::new(0x2aa1);

/// Bluetooth characteristic UUID.
///
/// `0x2aa2` Language
///
/// The Language characteristic is used to represent the preferred language of a user.
/// The Language definition is based on ISO 639-1 \RefRef{iso_639_1`.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Language |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.language.yaml)
pub const LANGUAGE: BluetoothUuid16 = BluetoothUuid16::new(0x2aa2);

/// Bluetooth characteristic UUID.
///
/// `0x2aa3` Barometric Pressure Trend
///
/// The Barometric Pressure Trend characteristic is used to represent the trend observed for barometric pressure.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Barometric Pressure Trend |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.barometric_pressure_trend/field/barometric_pressure_trend`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.barometric_pressure_trend.yaml)
pub const BAROMETRIC_PRESSURE_TREND: BluetoothUuid16 = BluetoothUuid16::new(0x2aa3);

/// Bluetooth characteristic UUID.
///
/// `0x2aa4` Bond Management Control Point
pub const BOND_MANAGEMENT_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2aa4);

/// Bluetooth characteristic UUID.
///
/// `0x2aa5` Bond Management Feature
pub const BOND_MANAGEMENT_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2aa5);

/// Bluetooth characteristic UUID.
///
/// `0x2aa6` Central Address Resolution
pub const CENTRAL_ADDRESS_RESOLUTION: BluetoothUuid16 = BluetoothUuid16::new(0x2aa6);

/// Bluetooth characteristic UUID.
///
/// `0x2aa7` CGM Measurement
///
/// The CGM Measurement characteristic is used to represent one or more CGM Measurement Records.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CGM Measurement Record(s) |
/// | **Type** | struct |
/// | **Size** | variable |
///
/// ### Description
///
/// A sequence of one or more CGM Measurement Records, concatenated as defined by the service.
/// The structure of a CGM Measurement Record is defined in `sec:org.bluetooth.characteristic.cgm_measurement/field/cgm_measurement_record`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_measurement.yaml)
pub const CGM_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2aa7);

/// Bluetooth characteristic UUID.
///
/// `0x2aa8` CGM Feature
///
/// The CGM Feature characteristic is used to represent the supported features of a continuous glucose monitor (CGM).
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CGM Feature |
/// | **Type** | boolean24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cgm_feature/field/cgm_feature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CGM Type-Sample Location |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cgm_feature/field/cgm_type-sample_location`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// CRC calculated over all data except the E2E-CRC field itself. See `sec:crc_calculation` for details.
/// If the service containing this characteristic does not support the E2E-CRC, this field typically has a value defined by the service such as 0xFFFF or any other value.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_feature.yaml)
pub const CGM_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2aa8);

/// Bluetooth characteristic UUID.
///
/// `0x2aa9` CGM Status
///
/// The CGM Status characteristic is used to represent the current status of a continuous glucose monitor (CGM) sensor.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Offset |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// The Time Offset field specifies the time since the Session Start Time (see `sec:org.bluetooth.characteristic.cgm_session_start_time`).
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CGM Status |
/// | **Type** | boolean24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// The structure of this field is identical to the structure of the combined Status fields as defined in `sec:org.bluetooth.characteristic.cgm_measurement/field/sensor_status_annunciation`, but it always consists of three octets regardless of the value.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// CRC calculated over all fields except the E2E-CRC field itself. See `sec:crc_calculation` for details.
/// Present if E2E-CRC Supported bit in CGM Feature characteristic is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_status.yaml)
pub const CGM_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2aa9);

/// Bluetooth characteristic UUID.
///
/// `0x2aaa` CGM Session Start Time
///
/// The CGM Session Start Time characteristic is used to represent the time the continuous glucose monitor (CGM) session is started.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Session Start Time |
/// | **Type** | struct |
/// | **Size** | 7 |
///
/// ### Description
///
/// Refer to the Date Time characteristic in `sec:org.bluetooth.characteristic.date_time`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Zone |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Zone characteristic in `sec:org.bluetooth.characteristic.time_zone`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | DST Offset |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the DST Offset characteristic in `sec:org.bluetooth.characteristic.dst_offset`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// CRC calculated over all fields. See `sec:crc_calculation` for details.
/// Present if E2E-CRC Supported bit in CGM Feature characteristic is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_session_start_time.yaml)
pub const CGM_SESSION_START_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2aaa);

/// Bluetooth characteristic UUID.
///
/// `0x2aab` CGM Session Run Time
///
/// The CGM Session Run Time characteristic is used to represent the expected run time of the continuous glucose monitor (CGM) session.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CGM Session Run Time |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// The expected run time of the CGM session in hours.
/// Unit: org.bluetooth.unit.time.hour
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// CRC calculated over all fields. See `sec:crc_calculation` for details.
/// Present if E2E-CRC Supported bit in CGM Feature characteristic is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_session_run_time.yaml)
pub const CGM_SESSION_RUN_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2aab);

/// Bluetooth characteristic UUID.
///
/// `0x2aac` CGM Specific Ops Control Point
///
/// The CGM Specific Ops Control Point characteristic is used to enable procedures related to a continuous glucose monitor (CGM).
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Op Code |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cgm_specific_ops_control_point/field/op_code_and_operand`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Operand |
/// | **Type** | struct |
/// | **Size** | 0 … 17 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cgm_specific_ops_control_point/field/op_code_and_operand`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// CRC calculated over all fields except the E2E-CRC field itself. See `sec:crc_calculation` for details.
/// Present if E2E-CRC Supported bit in CGM Feature characteristic is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cgm_specific_ops_control_point.yaml)
pub const CGM_SPECIFIC_OPS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2aac);

/// Bluetooth characteristic UUID.
///
/// `0x2aad` Indoor Positioning Configuration
pub const INDOOR_POSITIONING_CONFIGURATION: BluetoothUuid16 = BluetoothUuid16::new(0x2aad);

/// Bluetooth characteristic UUID.
///
/// `0x2aae` Latitude
pub const LATITUDE: BluetoothUuid16 = BluetoothUuid16::new(0x2aae);

/// Bluetooth characteristic UUID.
///
/// `0x2aaf` Longitude
pub const LONGITUDE: BluetoothUuid16 = BluetoothUuid16::new(0x2aaf);

/// Bluetooth characteristic UUID.
///
/// `0x2ab0` Local North Coordinate
pub const LOCAL_NORTH_COORDINATE: BluetoothUuid16 = BluetoothUuid16::new(0x2ab0);

/// Bluetooth characteristic UUID.
///
/// `0x2ab1` Local East Coordinate
pub const LOCAL_EAST_COORDINATE: BluetoothUuid16 = BluetoothUuid16::new(0x2ab1);

/// Bluetooth characteristic UUID.
///
/// `0x2ab2` Floor Number
pub const FLOOR_NUMBER: BluetoothUuid16 = BluetoothUuid16::new(0x2ab2);

/// Bluetooth characteristic UUID.
///
/// `0x2ab3` Altitude
pub const ALTITUDE: BluetoothUuid16 = BluetoothUuid16::new(0x2ab3);

/// Bluetooth characteristic UUID.
///
/// `0x2ab4` Uncertainty
pub const UNCERTAINTY: BluetoothUuid16 = BluetoothUuid16::new(0x2ab4);

/// Bluetooth characteristic UUID.
///
/// `0x2ab5` Location Name
pub const LOCATION_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2ab5);

/// Bluetooth characteristic UUID.
///
/// `0x2ab6` URI
pub const URI: BluetoothUuid16 = BluetoothUuid16::new(0x2ab6);

/// Bluetooth characteristic UUID.
///
/// `0x2ab7` HTTP Headers
pub const HTTP_HEADERS: BluetoothUuid16 = BluetoothUuid16::new(0x2ab7);

/// Bluetooth characteristic UUID.
///
/// `0x2ab8` HTTP Status Code
pub const HTTP_STATUS_CODE: BluetoothUuid16 = BluetoothUuid16::new(0x2ab8);

/// Bluetooth characteristic UUID.
///
/// `0x2ab9` HTTP Entity Body
pub const HTTP_ENTITY_BODY: BluetoothUuid16 = BluetoothUuid16::new(0x2ab9);

/// Bluetooth characteristic UUID.
///
/// `0x2aba` HTTP Control Point
pub const HTTP_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2aba);

/// Bluetooth characteristic UUID.
///
/// `0x2abb` HTTPS Security
pub const HTTPS_SECURITY: BluetoothUuid16 = BluetoothUuid16::new(0x2abb);

/// Bluetooth characteristic UUID.
///
/// `0x2abc` TDS Control Point
pub const TDS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2abc);

/// Bluetooth characteristic UUID.
///
/// `0x2abd` OTS Feature
pub const OTS_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2abd);

/// Bluetooth characteristic UUID.
///
/// `0x2abe` Object Name
///
/// The Object Name characteristic is used to represent the name of the associated object.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Object Name |
/// | **Type** | utf8s |
/// | **Size** | 0–120 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.object_name.yaml)
pub const OBJECT_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2abe);

/// Bluetooth characteristic UUID.
///
/// `0x2abf` Object Type
///
/// The Object Type characteristic is used to represent the type of the associated object, representing this with a UUID. The Object Type characteristic has two possible lengths, depending on whether the UUID conveyed is a 16-bit or 128-bit UUID.
/// The term gatt_uuid is not a defined Data Type but is either a 16-bit UUID using the uint16 Data Type or a 128-bit UUID using the uint128 Data Type.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Object Type |
/// | **Type** | gatt_uuid |
/// | **Size** | 2 or 16 |
///
/// ### Description
///
/// Object Type UUIDs that use the 16-bit format are defined in the Bluetooth SIG Assigned Numbers \RefRef{assigned_numbers`.
/// Object Type UUIDs that use the 128-bit format are proprietary UUIDs.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.object_type.yaml)
pub const OBJECT_TYPE: BluetoothUuid16 = BluetoothUuid16::new(0x2abf);

/// Bluetooth characteristic UUID.
///
/// `0x2ac0` Object Size
pub const OBJECT_SIZE: BluetoothUuid16 = BluetoothUuid16::new(0x2ac0);

/// Bluetooth characteristic UUID.
///
/// `0x2ac1` Object First-Created
pub const OBJECT_FIRST_CREATED: BluetoothUuid16 = BluetoothUuid16::new(0x2ac1);

/// Bluetooth characteristic UUID.
///
/// `0x2ac2` Object Last-Modified
pub const OBJECT_LAST_MODIFIED: BluetoothUuid16 = BluetoothUuid16::new(0x2ac2);

/// Bluetooth characteristic UUID.
///
/// `0x2ac3` Object ID
///
/// The Object ID characteristic is used to represent an object ID for the associated object.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Object ID |
/// | **Type** | uint48 |
/// | **Size** | 6 |
///
/// ### Description
///
/// Locally unique object identifier. Values are defined per service.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.object_id.yaml)
pub const OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2ac3);

/// Bluetooth characteristic UUID.
///
/// `0x2ac4` Object Properties
pub const OBJECT_PROPERTIES: BluetoothUuid16 = BluetoothUuid16::new(0x2ac4);

/// Bluetooth characteristic UUID.
///
/// `0x2ac5` Object Action Control Point
pub const OBJECT_ACTION_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2ac5);

/// Bluetooth characteristic UUID.
///
/// `0x2ac6` Object List Control Point
pub const OBJECT_LIST_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2ac6);

/// Bluetooth characteristic UUID.
///
/// `0x2ac7` Object List Filter
pub const OBJECT_LIST_FILTER: BluetoothUuid16 = BluetoothUuid16::new(0x2ac7);

/// Bluetooth characteristic UUID.
///
/// `0x2ac8` Object Changed
pub const OBJECT_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2ac8);

/// Bluetooth characteristic UUID.
///
/// `0x2ac9` Resolvable Private Address Only
pub const RESOLVABLE_PRIVATE_ADDRESS_ONLY: BluetoothUuid16 = BluetoothUuid16::new(0x2ac9);

/// Bluetooth characteristic UUID.
///
/// `0x2acc` Fitness Machine Feature
pub const FITNESS_MACHINE_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2acc);

/// Bluetooth characteristic UUID.
///
/// `0x2acd` Treadmill Data
///
/// The Treadmill Data characteristic is used to represent data related to a treadmill.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.treadmill_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// The Instantaneous Speed field represents the instantaneous speed of the belt of the treadmill.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// The Average Speed field represents the average speed since the beginning of the training session.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Total Distance field represents the total distance reported by the Server since the beginning of the training session.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Inclination |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
/// The Inclination field represents the current inclination of the Server. A positive value means that the user feels as if they are going uphill and a negative value means that the user feels as if they are going downhill.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ramp Angle Setting |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a degree
/// The Ramp Angle Setting field represents the current setting of the ramp angle of the Server.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Positive Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a meter
/// The Positive Elevation Gain field represents the positive elevation gain since the training session has started.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Negative Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a meter
/// The Negative Elevation Gain field represents the negative elevation gain since the training session has started.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Pace (Time per 500 meters) |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Instantaneous Pace field represents the instantaneous pace of a user while exercising. This value is directly related to the instantaneous speed of the treadmill but is presented with different units.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Pace (Time per 500 meters) |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Average Pace field represents the average pace of a user since the beginning of the training session. This value is directly related to the average speed of the treadmill but is presented with different units.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.metabolic_equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a training session that has been selected.
/// Present if bit 11 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Force On Belt |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.force.newton
/// The Force on Belt field represents the force being applied to the treadmill belt by the user’s steps. A positive value means that the user is accelerating the belt and a negative value means that the user is slowing down the belt
/// Present if bit 12 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Power Output |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Power Output field represents the power being applied to the treadmill by the user’s steps. A positive value means that the user is accelerating the belt and a negative value means that the user is slowing down the belt.
/// Present if bit 12 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.treadmill_data.yaml)
pub const TREADMILL_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2acd);

/// Bluetooth characteristic UUID.
///
/// `0x2ace` Cross Trainer Data
///
/// The Cross Trainer Data characteristic is used to represent data related to cross trainer activity.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.cross_trainer_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// The Average Speed field represents the average speed since the beginning of the training session.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Total Distance field represents the total distance reported by the Server since the beginning of the training session.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Steps Per Minute |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Step per Minute Rate field represents the average step rate of a user during a period of one minute.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Step Rate |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Average Step Rate field represents the average step rate since the beginning of the training session.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Stride Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10
/// A stride is a pair of steps
/// The Stride Count field represents the total number of strides since the beginning of the training session.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Positive Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Positive Elevation Gain field represents the positive elevation gain since the training session has started.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Negative Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Negative Elevation Gain field represents the negative elevation gain since the training session has started.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Inclination |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
/// The Inclination field represents the current inclination of the Server. A positive value means that the user feels as if they are going uphill and a negative value means that the user feels as if they are going downhill.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ramp Setting |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.plane_angle.degree
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a degree
/// The Ramp Angle Setting field represents the current setting of the ramp angle of the Server.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Resistance Level |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
/// The Resistance Level field represents the value of the current value of the resistance level of the Server.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Instantaneous Power field represents the value of the instantaneous power measured by the Server.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Average Power field represents the value of the average power measured by the Server since the beginning of the training session.
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 11 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 metabolic equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 12 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 13 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a training session that has been selected.
/// Present if bit 14 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cross_trainer_data.yaml)
pub const CROSS_TRAINER_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2ace);

/// Bluetooth characteristic UUID.
///
/// `0x2acf` Step Climber Data
///
/// The Step Climber Data characteristic is used to represent data related to a step climber device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.step_climber_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Floors |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// The Floors field represents the total number of floors counted by the Server since the beginning of the training session.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Step Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// The Step Count field represents the total number of steps counted by the Server since the beginning of the training session
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Steps Per Minute |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Step per Minute Rate field represents the average step rate of a user during a period of one minute.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Step Rate |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Average Step Rate field represents the average step rate since the beginning of the training session.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Positive Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Positive Elevation Gain field represents the positive elevation gain since the beginning of the training session.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 metabolic equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a selected training session.
/// Present if bit 8 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.step_climber_data.yaml)
pub const STEP_CLIMBER_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2acf);

/// Bluetooth characteristic UUID.
///
/// `0x2ad0` Stair Climber Data
///
/// The Stair Climber Data characteristic is used to represent data related to a stair climber device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.stair_climber_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Floors |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// The Floors field represents the total number of floors counted by the Server since the beginning of the training session.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Steps Per Minute |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Step per Minute Rate field represents the average step rate of a user during a period of one minute.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Step Rate |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.step_per_minute
/// The Average Step Rate field represents the average step rate since the beginning of the training session.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Positive Elevation Gain |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Positive Elevation Gain field represents the positive elevation gain since the beginning of the training session.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Stride Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// A stride is a pair of steps.
/// The Stride Count field represents the total number of strides since the beginning of the training session.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 metabolic equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a training session that has been selected.
/// Present if bit 9 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.stair_climber_data.yaml)
pub const STAIR_CLIMBER_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2ad0);

/// Bluetooth characteristic UUID.
///
/// `0x2ad1` Rower Data
///
/// The Rower Data characteristic is used to represent data related to a rowing device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.rower_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Stroke Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.stroke_per_minute
/// Represented values: M = 1, d = 0, b = -1
/// Unit is 1/2 of a stroke per minute
/// The Stroke Rate field represents the instantaneous stroke rate measured by the Server.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Stroke Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// The Stroke Count field represents the total number of strokes since the beginning of the training session.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Stroke Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.stroke_per_minute
/// Represented values: M = 1, d = 0, b = -1
/// Unit is 1/2 of a stroke per minute
/// The Average Stroke Rate field represents the average speed since the beginning of the training session
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Total Distance field represents the total distance reported by the Server since the beginning of the training session.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Pace (Time per 500 meters) |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Instantaneous Pace field represents the value of the pace (time per 500 meters) of the user while exercising.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Pace (Time per 500 meters) |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Average Pace field represents the value of the average pace (time per 500 meters) since the beginning of the training session.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Instantaneous Power field represents the value of the instantaneous power measured by the Server.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Average Power field represents the value of the average power measured by the Server since the beginning of the training session.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Resistance Level |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
/// The Resistance Level field represents the value of the current value of the resistance level of the Server.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 metabolic equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 11 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a selected training session.
/// Present if bit 12 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.rower_data.yaml)
pub const ROWER_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2ad1);

/// Bluetooth characteristic UUID.
///
/// `0x2ad2` Indoor Bike Data
///
/// The Indoor Bike Data characteristic is used to represent data related to the use of an indoor bike.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.indoor_bike_data/field/flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// The Instantaneous Speed field represents the instantaneous speed of the user.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Speed |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
/// The Average Speed field represents the average speed since the beginning of the training session.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Cadence |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.angular_velocity.revolution_per_minute
/// Represented values: M = 1, d = 0, b = -1
/// Unit is 1/2 of a revolution per minute
/// The Instantaneous Cadence field represents the instantaneous cadence of the user.
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Cadence |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.angular_velocity.revolution_per_minute
/// Represented values: M = 1, d = 0, b = -1
/// Unit is 1/2 of a revolution per minute
/// The Average Speed field represents the average cadence since the beginning of the training session.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.length.metre
/// The Total Distance field represents the total distance reported by the Server since the beginning of the training session.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Resistance Level |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
/// The Resistance Level field represents the value of the current value of the resistance level of the Server.
/// Present if bit 5 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Instantaneous Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Instantaneous Power field represents the value of the instantaneous power measured by the Server.
/// Present if bit 6 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Power |
/// | **Type** | sint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
/// The Average Power field represents the value of the average power measured by the Server since the beginning of the training session.
/// Present if bit 7 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Total Energy field represents the total expended energy of a user since the training session has started.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Hour field represents the average expended energy of a user during a period of one hour.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Per Minute |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
/// The Energy per Minute field represents the average expended energy of a user during a period of one minute.
/// Present if bit 8 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// The Heart Rate field represents the current heart rate value of the user (e.g., measured via the contact heart rate or any other means).
/// Present if bit 9 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 metabolic equivalent
/// The Metabolic Equivalent field represents the metabolic equivalent of the user.
/// Present if bit 10 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Elapsed Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Elapsed Time field represents the elapsed time of a training session since the training session has started.
/// Present if bit 11 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Remaining Time |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// The Remaining Time field represents the remaining time of a selected training session.
/// Present if bit 12 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.indoor_bike_data.yaml)
pub const INDOOR_BIKE_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2ad2);

/// Bluetooth characteristic UUID.
///
/// `0x2ad3` Training Status
pub const TRAINING_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2ad3);

/// Bluetooth characteristic UUID.
///
/// `0x2ad4` Supported Speed Range
///
/// The Supported Speed Range characteristic is used to represent the speed range supported by a fitness machine.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Speed |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Speed |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Increment |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.velocity.kilometre_per_hour
/// Represented values: M = 1, d = -2, b = 0
/// Unit is 1/100 of a kilometer per hour
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_speed_range.yaml)
pub const SUPPORTED_SPEED_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ad4);

/// Bluetooth characteristic UUID.
///
/// `0x2ad5` Supported Inclination Range
///
/// The Supported Inclination Range characteristic is used to represent the inclination range supported by a fitness machine.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Inclination |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Inclination |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Increment |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.percentage
/// Represented values: M = 1, d = -1, b = 0
/// Unit is 1/10 of a percent
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_inclination_range.yaml)
pub const SUPPORTED_INCLINATION_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ad5);

/// Bluetooth characteristic UUID.
///
/// `0x2ad6` Supported Resistance Level Range
///
/// The Supported Resistance Level Range characteristic is used to represent the resistance level range supported by a fitness machine.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Resistance Level |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Resistance Level |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Increment |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.unitless
/// Represented values: M = 1, d = 1, b = 0
/// Unit is 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_resistance_level_range.yaml)
pub const SUPPORTED_RESISTANCE_LEVEL_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ad6);

/// Bluetooth characteristic UUID.
///
/// `0x2ad7` Supported Heart Rate Range
///
/// The Supported Heart Rate Range characteristic is used to represent the heart rate range supported by a fitness machine.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Increment |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_heart_rate_range.yaml)
pub const SUPPORTED_HEART_RATE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ad7);

/// Bluetooth characteristic UUID.
///
/// `0x2ad8` Supported Power Range
///
/// The Supported Power Range characteristic is used to represent the power range supported by a fitness machine.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Power |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Power |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Increment |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.power.watt
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.supported_power_range.yaml)
pub const SUPPORTED_POWER_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ad8);

/// Bluetooth characteristic UUID.
///
/// `0x2ad9` Fitness Machine Control Point
pub const FITNESS_MACHINE_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2ad9);

/// Bluetooth characteristic UUID.
///
/// `0x2ada` Fitness Machine Status
pub const FITNESS_MACHINE_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2ada);

/// Bluetooth characteristic UUID.
///
/// `0x2adb` Mesh Provisioning Data In
pub const MESH_PROVISIONING_DATA_IN: BluetoothUuid16 = BluetoothUuid16::new(0x2adb);

/// Bluetooth characteristic UUID.
///
/// `0x2adc` Mesh Provisioning Data Out
pub const MESH_PROVISIONING_DATA_OUT: BluetoothUuid16 = BluetoothUuid16::new(0x2adc);

/// Bluetooth characteristic UUID.
///
/// `0x2add` Mesh Proxy Data In
pub const MESH_PROXY_DATA_IN: BluetoothUuid16 = BluetoothUuid16::new(0x2add);

/// Bluetooth characteristic UUID.
///
/// `0x2ade` Mesh Proxy Data Out
pub const MESH_PROXY_DATA_OUT: BluetoothUuid16 = BluetoothUuid16::new(0x2ade);

/// Bluetooth characteristic UUID.
///
/// `0x2ae0` Average Current
///
/// The Average Current characteristic is used to represent average electric current over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.average_current.yaml)
pub const AVERAGE_CURRENT: BluetoothUuid16 = BluetoothUuid16::new(0x2ae0);

/// Bluetooth characteristic UUID.
///
/// `0x2ae1` Average Voltage
///
/// The Average Voltage characteristic is used to represent average voltage over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.average_voltage.yaml)
pub const AVERAGE_VOLTAGE: BluetoothUuid16 = BluetoothUuid16::new(0x2ae1);

/// Bluetooth characteristic UUID.
///
/// `0x2ae2` Boolean
///
/// The Boolean characteristic is used to represent the predefined Boolean values.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Boolean |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.boolean/field/boolean`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.boolean.yaml)
pub const BOOLEAN: BluetoothUuid16 = BluetoothUuid16::new(0x2ae2);

/// Bluetooth characteristic UUID.
///
/// `0x2ae3` Chromatic Distance from Planckian
///
/// The Chromatic Distance from Planckian characteristic is used to represent a distance of a chromaticity coordinate from the Planckian locus in the (u′, 2/3v′) diagram as defined by ANSI standard C78.377-2008 \RefRef{ansi_anslg_c78`.
/// The distance is positive if the chromaticity coordinate is located above the Planckian locus (i.e., has a higher y value than the Planckian), and negative if it is located below.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Distance from Planckian |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 0.00001.
/// Minimum: -0.05
/// Maximum: 0.05
/// Represented values: M = 1, d = -5, b = 0
/// A value of 0x7FFF represents "value is not valid".
/// A value of 0x7FFE represents "value is not known".
/// All other values are prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.chromatic_distance_from_planckian.yaml)
pub const CHROMATIC_DISTANCE_FROM_PLANCKIAN: BluetoothUuid16 = BluetoothUuid16::new(0x2ae3);

/// Bluetooth characteristic UUID.
///
/// `0x2ae4` Chromaticity Coordinates
///
/// The Chromaticity Coordinates characteristic is used to represent a chromaticity coordinate.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Chromaticity x-coordinate |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Chromaticity Coordinate characteristic in `sec:org.bluetooth.characteristic.chromaticity_coordinate`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Chromaticity y-coordinate |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Chromaticity Coordinate characteristic in `sec:org.bluetooth.characteristic.chromaticity_coordinate`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.chromaticity_coordinates.yaml)
pub const CHROMATICITY_COORDINATES: BluetoothUuid16 = BluetoothUuid16::new(0x2ae4);

/// Bluetooth characteristic UUID.
///
/// `0x2ae5` Chromaticity in CCT and Duv Values
///
/// The Chromaticity in CCT and Duv Values characteristic is used to represent the combination of the Correlated Color Temperature characteristic and the Chromatic Distance From Planckian characteristic.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Correlated Color Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Correlated Color Temperature characteristic in `sec:org.bluetooth.characteristic.correlated_color_temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Chromaticity Distance from Planckian |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Chromatic Distance From Planckian characteristic in `sec:org.bluetooth.characteristic.chromatic_distance_from_planckian`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.chromaticity_in_cct_and_duv_values.yaml)
pub const CHROMATICITY_IN_CCT_AND_DUV_VALUES: BluetoothUuid16 = BluetoothUuid16::new(0x2ae5);

/// Bluetooth characteristic UUID.
///
/// `0x2ae6` Chromaticity Tolerance
///
/// The Chromaticity Tolerance characteristic is used to represent the tolerance of a tuple of chromaticity values. This tolerance represents the value of a radius of a circle in the CIE 1976 \RefRef{cie_1976` (u’,v’) diagram. This tolerance value corresponds to the 3-sigma values of the expected chromaticity deviations.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Chromaticity Tolerance |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 0.0001
/// Minimum: 0
/// Maximum: 0.0255
/// Represented values: M = 1, d = -4, b = 0
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.chromaticity_tolerance.yaml)
pub const CHROMATICITY_TOLERANCE: BluetoothUuid16 = BluetoothUuid16::new(0x2ae6);

/// Bluetooth characteristic UUID.
///
/// `0x2ae7` CIE 13.3-1995 Color Rendering Index
pub const CIE_133_1995_COLOR_RENDERING_INDEX: BluetoothUuid16 = BluetoothUuid16::new(0x2ae7);

/// Bluetooth characteristic UUID.
///
/// `0x2ae8` Coefficient
///
/// The Coefficient characteristic is used to represent a general coefficient value.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Coefficient |
/// | **Type** | float32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Unit is unitless.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.coefficient.yaml)
pub const COEFFICIENT: BluetoothUuid16 = BluetoothUuid16::new(0x2ae8);

/// Bluetooth characteristic UUID.
///
/// `0x2ae9` Correlated Color Temperature
///
/// The Correlated Color Temperature characteristic is used to represent correlated color temperature.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Correlated Color Temperature |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is Kelvin with a resolution of 1.
/// Minimum: 800
/// Maximum: 65534
/// Unit: org.bluetooth.unit.thermodynamic_temperature.kelvin
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.correlated_color_temperature.yaml)
pub const CORRELATED_COLOR_TEMPERATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2ae9);

/// Bluetooth characteristic UUID.
///
/// `0x2aea` Count 16
///
/// The Count 16 characteristic is used to represent a general count value.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Count |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1.
/// Minimum: 0
/// Maximum: 65534
/// Represented values: M = 1, d = 0, b = 0
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.count_16.yaml)
pub const COUNT_16: BluetoothUuid16 = BluetoothUuid16::new(0x2aea);

/// Bluetooth characteristic UUID.
///
/// `0x2aeb` Count 24
///
/// The Count 24 characteristic is used to represent a general count value.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Count |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1.
/// Minimum: 0
/// Maximum: 16777214
/// Represented values: M = 1, d = 0, b = 0
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.count_24.yaml)
pub const COUNT_24: BluetoothUuid16 = BluetoothUuid16::new(0x2aeb);

/// Bluetooth characteristic UUID.
///
/// `0x2aec` Country Code
///
/// The Country Code characteristic is used to represent a country or dependent areas in accordance with the ISO 3166-1 Numeric standard \RefRef{iso_3166_1`.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Country Code |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1.
/// Minimum: 0
/// Maximum: 4095
/// Represented values: M = 1, d = 0, b = 0
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.country_code.yaml)
pub const COUNTRY_CODE: BluetoothUuid16 = BluetoothUuid16::new(0x2aec);

/// Bluetooth characteristic UUID.
///
/// `0x2aed` Date UTC
///
/// The Date UTC characteristic is used to represent the date as days elapsed since the Epoch (Jan 1, 1970) in the Coordinated Universal Time (UTC) time zone.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Date |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is a day with a resolution of 1.
/// Minimum: 1
/// Maximum: 16777214
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.time.day
/// A value of 0x000000 represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.date_utc.yaml)
pub const DATE_UTC: BluetoothUuid16 = BluetoothUuid16::new(0x2aed);

/// Bluetooth characteristic UUID.
///
/// `0x2aee` Electric Current
///
/// The Electric Current characteristic is used to represent an electric current.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Current |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is ampere with a resolution of 0.01.
/// Minimum: 0
/// Maximum: 655.34
/// Represented values: M = 1, d = -2, b = 0
/// Unit: org.bluetooth.unit.electric_current.ampere
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.electric_current.yaml)
pub const ELECTRIC_CURRENT: BluetoothUuid16 = BluetoothUuid16::new(0x2aee);

/// Bluetooth characteristic UUID.
///
/// `0x2aef` Electric Current Range
///
/// The Electric Current Range characteristic is used to represent a range of electric current values.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.electric_current_range.yaml)
pub const ELECTRIC_CURRENT_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2aef);

/// Bluetooth characteristic UUID.
///
/// `0x2af0` Electric Current Specification
///
/// The Electric Current Specification characteristic is used to represent a specification of an electric current value.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Typical Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.electric_current_specification.yaml)
pub const ELECTRIC_CURRENT_SPECIFICATION: BluetoothUuid16 = BluetoothUuid16::new(0x2af0);

/// Bluetooth characteristic UUID.
///
/// `0x2af1` Electric Current Statistics
///
/// The Electric Current Statistics characteristic is used to represent a set of statistical electric current values.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Standard Deviation Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Electric Current Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.electric_current_statistics.yaml)
pub const ELECTRIC_CURRENT_STATISTICS: BluetoothUuid16 = BluetoothUuid16::new(0x2af1);

/// Bluetooth characteristic UUID.
///
/// `0x2af2` Energy
///
/// The Energy characteristic is used to represent a measure of energy.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is kilowatt-hour with a resolution of 1.
/// Minimum: 0
/// Maximum: 16777214
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.energy.kilowatt_hour
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.energy.yaml)
pub const ENERGY: BluetoothUuid16 = BluetoothUuid16::new(0x2af2);

/// Bluetooth characteristic UUID.
///
/// `0x2af3` Energy in a Period of Day
///
/// The Energy in a Period of Day characteristic is used to represent energy use in a period of a day.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy Value |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to the Energy characteristic in `sec:org.bluetooth.characteristic.energy`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Start Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | End Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.energy_in_a_period_of_day.yaml)
pub const ENERGY_IN_A_PERIOD_OF_DAY: BluetoothUuid16 = BluetoothUuid16::new(0x2af3);

/// Bluetooth characteristic UUID.
///
/// `0x2af4` Event Statistics
///
/// The Event Statistics characteristic is used to represent statistical values of events.
/// The structure of this characteristic is defined below
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Number of Events |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Count 16 characteristic in `sec:org.bluetooth.characteristic.count_16`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Event Duration |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to the Time Second 16 characteristic in `sec:org.bluetooth.characteristic.time_second_16`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Elapsed Since Last Event |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to the Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.event_statistics.yaml)
pub const EVENT_STATISTICS: BluetoothUuid16 = BluetoothUuid16::new(0x2af4);

/// Bluetooth characteristic UUID.
///
/// `0x2af5` Fixed String 16
///
/// The Fixed String 16 characteristic is used to represent a variable-length UTF-8 string with a maximum length of 16 octets, see Volume 1, Part E, Section 2.9.3 in [1].
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fixed String |
/// | **Type** | utf8s\{16\} |
/// | **Size** | 16 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fixed_string_16.yaml)
pub const FIXED_STRING_16: BluetoothUuid16 = BluetoothUuid16::new(0x2af5);

/// Bluetooth characteristic UUID.
///
/// `0x2af6` Fixed String 24
///
/// The Fixed String 24 characteristic is used to represent a variable-length UTF-8 string with a maximum length of 24 octets, see Volume 1, Part E, Section 2.9.3 in [1].
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fixed String |
/// | **Type** | utf8s\{24\} |
/// | **Size** | 24 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fixed_string_24.yaml)
pub const FIXED_STRING_24: BluetoothUuid16 = BluetoothUuid16::new(0x2af6);

/// Bluetooth characteristic UUID.
///
/// `0x2af7` Fixed String 36
///
/// The Fixed String 36 characteristic is used to represent a variable-length UTF-8 string with a maximum length of 36 octets, see Volume 1, Part E, Section 2.9.3 in [1].
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fixed String |
/// | **Type** | utf8s\{36\} |
/// | **Size** | 36 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fixed_string_36.yaml)
pub const FIXED_STRING_36: BluetoothUuid16 = BluetoothUuid16::new(0x2af7);

/// Bluetooth characteristic UUID.
///
/// `0x2af8` Fixed String 8
///
/// The Fixed String 8 characteristic is used to represent a variable-length UTF-8 string with a maximum length of 8 octets, see Volume 1, Part E, Section 2.9.3 in [1].
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fixed String |
/// | **Type** | utf8s\{8\} |
/// | **Size** | 8 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fixed_string_8.yaml)
pub const FIXED_STRING_8: BluetoothUuid16 = BluetoothUuid16::new(0x2af8);

/// Bluetooth characteristic UUID.
///
/// `0x2af9` Generic Level
///
/// The Generic Level characteristic is used to represent a general level value of a setting of a device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Generic Level |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1.
/// Minimum: 0
/// Maximum: 65535
/// Represented values: M = 1, d = 0, b = 0
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.generic_level.yaml)
pub const GENERIC_LEVEL: BluetoothUuid16 = BluetoothUuid16::new(0x2af9);

/// Bluetooth characteristic UUID.
///
/// `0x2afa` Global Trade Item Number
///
/// The Global Trade Item Number characteristic is used to represent an identifier as defined by GS1 \RefRef{gs1`, with up to 14 digits.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Global Trade Item Number |
/// | **Type** | uint48 |
/// | **Size** | 6 |
///
/// ### Description
///
/// An identifier for trade items, defined by GS1 \RefRef{gs1`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.global_trade_item_number.yaml)
pub const GLOBAL_TRADE_ITEM_NUMBER: BluetoothUuid16 = BluetoothUuid16::new(0x2afa);

/// Bluetooth characteristic UUID.
///
/// `0x2afb` Illuminance
///
/// The Illuminance characteristic is used to represent a measure of illuminance.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Illuminance |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is lux with a resolution of 0.01.
/// Minimum: 0
/// Maximum: 167772.14
/// Represented values: M = 1, d = -2, b = 0
/// Unit: org.bluetooth.unit.illuminance.lux
/// A value of 0xFFFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.illuminance.yaml)
pub const ILLUMINANCE: BluetoothUuid16 = BluetoothUuid16::new(0x2afb);

/// Bluetooth characteristic UUID.
///
/// `0x2afc` Luminous Efficacy
///
/// The Luminous Efficacy characteristic is used to represent a measure of luminous efficacy.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Luminous Efficacy |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is lumen per watt with a resolution of 0.1.
/// Minimum: 0
/// Maximum: 1800
/// Represented values: M = 1, d = -1, b = 0
/// Unit: org.bluetooth.unit.luminous_efficacy.lumen_per_watt
/// A value of 0xFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_efficacy.yaml)
pub const LUMINOUS_EFFICACY: BluetoothUuid16 = BluetoothUuid16::new(0x2afc);

/// Bluetooth characteristic UUID.
///
/// `0x2afd` Luminous Energy
///
/// The Luminous Energy characteristic is used to represent a measure of luminous energy.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Luminous Energy |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is lumen hour with a resolution of 1000.
/// Minimum: 0
/// Maximum: 16777214000
/// Represented values: M = 1, d = 3, b = 0
/// Unit: org.bluetooth.unit.luminous_energy.lumen_per_hour
/// A value of 0xFFFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_energy.yaml)
pub const LUMINOUS_ENERGY: BluetoothUuid16 = BluetoothUuid16::new(0x2afd);

/// Bluetooth characteristic UUID.
///
/// `0x2afe` Luminous Exposure
///
/// The Luminous Exposure characteristic is used to represent a measure of luminous exposure.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Luminous Exposure |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is lux hour with a resolution of 1000.
/// Minimum: 0
/// Maximum: 16777214000
/// Represented values: M = 1, d = 3, b = 0
/// Unit: org.bluetooth.unit.luminous_exposure.lux_hour
/// A value of 0xFFFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_exposure.yaml)
pub const LUMINOUS_EXPOSURE: BluetoothUuid16 = BluetoothUuid16::new(0x2afe);

/// Bluetooth characteristic UUID.
///
/// `0x2aff` Luminous Flux
///
/// The Luminous Flux characteristic is used to represent a measure of luminous flux.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Luminous Flux |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is lumen with a resolution of 1
/// Minimum: 0
/// Maximum: 65534
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.luminous_flux.lumen
/// A value of 0xFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_flux.yaml)
pub const LUMINOUS_FLUX: BluetoothUuid16 = BluetoothUuid16::new(0x2aff);

/// Bluetooth characteristic UUID.
///
/// `0x2b00` Luminous Flux Range
///
/// The Luminous Flux Range characteristic is used to represent a luminous flux range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Luminous Flux |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Luminous Flux characteristic in `sec:org.bluetooth.characteristic.luminous_flux`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Luminous Flux |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Luminous Flux characteristic in `sec:org.bluetooth.characteristic.luminous_flux`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_flux_range.yaml)
pub const LUMINOUS_FLUX_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b00);

/// Bluetooth characteristic UUID.
///
/// `0x2b01` Luminous Intensity
///
/// The Luminous Intensity characteristic is used to represent the luminous intensity of a beam of light.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Luminous Intensity |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is candela with a resolution of 1.
/// Minimum: 0
/// Maximum: 65534
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.luminous_intensity.candela
/// A value of 0xFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.luminous_intensity.yaml)
pub const LUMINOUS_INTENSITY: BluetoothUuid16 = BluetoothUuid16::new(0x2b01);

/// Bluetooth characteristic UUID.
///
/// `0x2b02` Mass Flow
///
/// The Mass Flow characteristic is used to represent a flow of mass.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Mass Flow |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is gram/second with a resolution of 1.
/// Minimum: 0
/// Maximum: 65534
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.mass_flow.gram_per_second
/// A value of 0xFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.mass_flow.yaml)
pub const MASS_FLOW: BluetoothUuid16 = BluetoothUuid16::new(0x2b02);

/// Bluetooth characteristic UUID.
///
/// `0x2b03` Perceived Lightness
///
/// The Perceived Lightness characteristic is used to represent the perceived lightness of a light.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Perceived Lightness |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1.
/// Minimum: 0
/// Maximum: 65535
/// Represented values: M = 1, d = 0, b = 0
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.perceived_lightness.yaml)
pub const PERCEIVED_LIGHTNESS: BluetoothUuid16 = BluetoothUuid16::new(0x2b03);

/// Bluetooth characteristic UUID.
///
/// `0x2b04` Percentage 8
///
/// The Percentage 8 characteristic is used to represent a percentage.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Percentage 8 |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is a percentage with a resolution of 0.5.
/// Minimum: 0
/// Maximum: 100
/// Represented values: M = 1, d = 0, b = -1
/// Unit: org.bluetooth.unit.percentage
/// A value of 0xFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.percentage_8.yaml)
pub const PERCENTAGE_8: BluetoothUuid16 = BluetoothUuid16::new(0x2b04);

/// Bluetooth characteristic UUID.
///
/// `0x2b05` Power
///
/// The Power characteristic is used to represent a measure of power.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Power |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is watt with a resolution of 0.1.
/// Minimum: 0
/// Maximum: 1677721.3
/// Represented values: M = 1, d = -1, b = 0
/// Unit: org.bluetooth.unit.power.watt
/// A value of 0xFFFFFE represents "value is not valid".
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.power.yaml)
pub const POWER: BluetoothUuid16 = BluetoothUuid16::new(0x2b05);

/// Bluetooth characteristic UUID.
///
/// `0x2b06` Power Specification
///
/// The Power Specification characteristic is used to represent a specification of power values.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Power Value |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to Power characteristic in `sec:org.bluetooth.characteristic.power`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Typical Power Value |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to Power characteristic in `sec:org.bluetooth.characteristic.power`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Power Value |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to Power characteristic in `sec:org.bluetooth.characteristic.power`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.power_specification.yaml)
pub const POWER_SPECIFICATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b06);

/// Bluetooth characteristic UUID.
///
/// `0x2b07` Relative Runtime in a Current Range
///
/// The Relative Runtime in a Current Range characteristic is used to represent a relative value in an electric current range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Runtime Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Current |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Current |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Electric Current characteristic in `sec:org.bluetooth.characteristic.electric_current`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_runtime_in_a_current_range.yaml)
pub const RELATIVE_RUNTIME_IN_A_CURRENT_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b07);

/// Bluetooth characteristic UUID.
///
/// `0x2b08` Relative Runtime in a Generic Level Range
///
/// The Relative Runtime in a Generic Level Range characteristic is used to represent a runtime in a generic level range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Generic Level |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Generic Level characteristic in `sec:org.bluetooth.characteristic.generic_level`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Generic Level |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Generic Level characteristic in `sec:org.bluetooth.characteristic.generic_level`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_runtime_in_a_generic_level_range.yaml)
pub const RELATIVE_RUNTIME_IN_A_GENERIC_LEVEL_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b08);

/// Bluetooth characteristic UUID.
///
/// `0x2b09` Relative Value in a Voltage Range
///
/// The Relative Value in a Voltage Range characteristic is used to represent a relative value in a voltage range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Voltage |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Voltage |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_value_in_a_voltage_range.yaml)
pub const RELATIVE_VALUE_IN_A_VOLTAGE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b09);

/// Bluetooth characteristic UUID.
///
/// `0x2b0a` Relative Value in an Illuminance Range
///
/// The Relative Value in an Illuminance Range characteristic is used to represent a relative value in an illuminance range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Illuminance |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to Illuminance characteristic in `sec:org.bluetooth.characteristic.illuminance`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Illuminance |
/// | **Type** | struct |
/// | **Size** | 3 |
///
/// ### Description
///
/// Refer to Illuminance characteristic in `sec:org.bluetooth.characteristic.illuminance`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_value_in_an_illuminance_range.yaml)
pub const RELATIVE_VALUE_IN_AN_ILLUMINANCE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b0a);

/// Bluetooth characteristic UUID.
///
/// `0x2b0b` Relative Value in a Period of Day
///
/// The Relative Value in a Period of Day characteristic is used to represent the combination of the Percentage 8 characteristic and two instances of the Time Decihour 8 characteristic.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Start Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | End Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_value_in_a_period_of_day.yaml)
pub const RELATIVE_VALUE_IN_A_PERIOD_OF_DAY: BluetoothUuid16 = BluetoothUuid16::new(0x2b0b);

/// Bluetooth characteristic UUID.
///
/// `0x2b0c` Relative Value in a Temperature Range
///
/// The Relative Value in a Temperature Range characteristic is used to represent the combination of the Percentage 8 characteristic and two instances of the Temperature characteristic.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Temperature Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Temperature Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_value_in_a_temperature_range.yaml)
pub const RELATIVE_VALUE_IN_A_TEMPERATURE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b0c);

/// Bluetooth characteristic UUID.
///
/// `0x2b0d` Temperature 8
///
/// The Temperature 8 characteristic is used to represent a measure of temperature with a limited range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature 8 |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is degree Celsius with a resolution of 0.5.
/// Minimum: -64.0
/// Maximum: 63.0
/// Represented values: M = 1, d = 0, b = -1
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// A value of 0x7F represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_8.yaml)
pub const TEMPERATURE_8: BluetoothUuid16 = BluetoothUuid16::new(0x2b0d);

/// Bluetooth characteristic UUID.
///
/// `0x2b0e` Temperature 8 in a Period of Day
///
/// The Temperature 8 in a Period of Day characteristic is used to represent a temperature setting over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Temperature |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Temperature 8 characteristic in `sec:org.bluetooth.characteristic.temperature_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Start Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | End Time |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Decihour 8 characteristic in `sec:org.bluetooth.characteristic.time_decihour_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_8_in_a_period_of_day.yaml)
pub const TEMPERATURE_8_IN_A_PERIOD_OF_DAY: BluetoothUuid16 = BluetoothUuid16::new(0x2b0e);

/// Bluetooth characteristic UUID.
///
/// `0x2b0f` Temperature 8 Statistics
///
/// The Temperature 8 Statistics characteristic is used to represent temperature statistics over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Temperature 8 characteristic in `sec:org.bluetooth.characteristic.temperature_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Standard Deviation Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Temperature 8 characteristic in `sec:org.bluetooth.characteristic.temperature_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Temperature 8 characteristic in `sec:org.bluetooth.characteristic.temperature_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Value |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Temperature 8 characteristic in `sec:org.bluetooth.characteristic.temperature_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_8_statistics.yaml)
pub const TEMPERATURE_8_STATISTICS: BluetoothUuid16 = BluetoothUuid16::new(0x2b0f);

/// Bluetooth characteristic UUID.
///
/// `0x2b10` Temperature Range
///
/// The Temperature Range characteristic is used to represent a temperature range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_range.yaml)
pub const TEMPERATURE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b10);

/// Bluetooth characteristic UUID.
///
/// `0x2b11` Temperature Statistics
///
/// The Temperature Statistics characteristic is used to represent temperature statistics over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Standard Deviation Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Temperature |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Temperature characteristic in `sec:org.bluetooth.characteristic.temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.temperature_statistics.yaml)
pub const TEMPERATURE_STATISTICS: BluetoothUuid16 = BluetoothUuid16::new(0x2b11);

/// Bluetooth characteristic UUID.
///
/// `0x2b12` Time Decihour 8
///
/// The Time Decihour 8 characteristic is used to represent a period of time in tenths of an hour.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Decihour 8 |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is hour with a resolution of 0.1.
/// Minimum: 0.0
/// Maximum: 23.9
/// Represented values: M = 1, d = -1, b = 0
/// Unit: org.bluetooth.unit.time.hour
/// A value of 0xFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_decihour_8.yaml)
pub const TIME_DECIHOUR_8: BluetoothUuid16 = BluetoothUuid16::new(0x2b12);

/// Bluetooth characteristic UUID.
///
/// `0x2b13` Time Exponential 8
///
/// The Time Exponential 8 characteristic is used to represent a measure of a period of time in seconds.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Exponential 8 |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// The time duration is given by the value 1.1\textsuperscript{N–64` in seconds, with N being the raw 8-bit value.
/// Minimum: 0.0
/// Maximum: 66560641
/// Unit: org.bluetooth.unit.time.second
/// A raw value of 0x00 represents 0 seconds.
/// A raw value of 0xFE represents the total life of the device.
/// A raw value of 0xFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_exponential_8.yaml)
pub const TIME_EXPONENTIAL_8: BluetoothUuid16 = BluetoothUuid16::new(0x2b13);

/// Bluetooth characteristic UUID.
///
/// `0x2b14` Time Hour 24
///
/// The Time Hour 24 characteristic is used to represent a period of time in hours.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Hour 24 |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is hour with a resolution of 1.
/// Minimum: 0
/// Maximum: 16777214
/// Unit: org.bluetooth.unit.time.hour
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_hour_24.yaml)
pub const TIME_HOUR_24: BluetoothUuid16 = BluetoothUuid16::new(0x2b14);

/// Bluetooth characteristic UUID.
///
/// `0x2b15` Time Millisecond 24
///
/// The Time Millisecond 24 characteristic is used to represent a period of time with a resolution of 1 millisecond.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Millisecond 24 |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is second with a resolution of 0.001.
/// Minimum: 0
/// Maximum: 16777.214
/// Represented values: M = 1, d = -3, b = 0
/// Unit: org.bluetooth.unit.time.second
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_millisecond_24.yaml)
pub const TIME_MILLISECOND_24: BluetoothUuid16 = BluetoothUuid16::new(0x2b15);

/// Bluetooth characteristic UUID.
///
/// `0x2b16` Time Second 16
///
/// The Time Second 16 characteristic is used to represent a period of time with a unit of 1 second.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Second 16 |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is second with a resolution of 1.
/// Minimum: 0
/// Maximum: 65534
/// Unit: org.bluetooth.unit.time.second
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_second_16.yaml)
pub const TIME_SECOND_16: BluetoothUuid16 = BluetoothUuid16::new(0x2b16);

/// Bluetooth characteristic UUID.
///
/// `0x2b17` Time Second 8
///
/// The Time Second 8 characteristic is used to represent a period of time with a unit of 1 second.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Second 8 |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is second with a resolution of 1.
/// Minimum: 0
/// Maximum: 254
/// Unit: org.bluetooth.unit.time.second
/// A value of 0xFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_second_8.yaml)
pub const TIME_SECOND_8: BluetoothUuid16 = BluetoothUuid16::new(0x2b17);

/// Bluetooth characteristic UUID.
///
/// `0x2b18` Voltage
///
/// The Voltage characteristic is used to represent a measure of positive electric potential difference.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Voltage Value |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is volt with a resolution of 1/64V.
/// Minimum: 0.0
/// Maximum: 1022.0
/// Represented values: M = 1, d = 0, b = -6
/// Unit: org.bluetooth.unit.electric_potential_difference.volt
/// A value of 0xFFFF represents "value is not known".
/// The minimum representable value represents the minimum value or lower, the maximum representable value represents the maximum value or higher.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.voltage.yaml)
pub const VOLTAGE: BluetoothUuid16 = BluetoothUuid16::new(0x2b18);

/// Bluetooth characteristic UUID.
///
/// `0x2b19` Voltage Specification
///
/// The Voltage Specification characteristic is used to represent a specification of voltage values.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Typical Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.voltage_specification.yaml)
pub const VOLTAGE_SPECIFICATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b19);

/// Bluetooth characteristic UUID.
///
/// `0x2b1a` Voltage Statistics
///
/// The Voltage Statistics characteristic is used to represent a set of statistical voltage values over a period of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Average Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Standard Deviation Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Voltage Value |
/// | **Type** | struct |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Voltage characteristic in `sec:org.bluetooth.characteristic.voltage`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sensing Duration |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Time Exponential 8 characteristic in `sec:org.bluetooth.characteristic.time_exponential_8`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.voltage_statistics.yaml)
pub const VOLTAGE_STATISTICS: BluetoothUuid16 = BluetoothUuid16::new(0x2b1a);

/// Bluetooth characteristic UUID.
///
/// `0x2b1b` Volume Flow
///
/// The Volume Flow characteristic is used to represent a flow of a general volume such as a volume of material or gas.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Volume Flow |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is liter/second with a resolution of 0.001 (1 milliliter).
/// Minimum: 0
/// Maximum: 65534
/// Represented values: M = 1, d = -3, b = 0
/// Unit: org.bluetooth.unit.volume_flow.litre_per_second
/// A value of 0xFFFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.volume_flow.yaml)
pub const VOLUME_FLOW: BluetoothUuid16 = BluetoothUuid16::new(0x2b1b);

/// Bluetooth characteristic UUID.
///
/// `0x2b1c` Chromaticity Coordinate
///
/// The Chromaticity Coordinate characteristic is used to represent an x- or y-coordinate in a color diagram such as the CIE1931 diagram \RefRef{cie_1931`.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Chromaticity Coordinate |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is unitless with a resolution of 1/65535
/// Minimum: 0
/// Maximum: 1.0
/// Represented values: M = 1, d = 0, b = -16
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.chromaticity_coordinate.yaml)
pub const CHROMATICITY_COORDINATE: BluetoothUuid16 = BluetoothUuid16::new(0x2b1c);

/// Bluetooth characteristic UUID.
///
/// `0x2b1d` RC Feature
pub const RC_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2b1d);

/// Bluetooth characteristic UUID.
///
/// `0x2b1e` RC Settings
pub const RC_SETTINGS: BluetoothUuid16 = BluetoothUuid16::new(0x2b1e);

/// Bluetooth characteristic UUID.
///
/// `0x2b1f` Reconnection Configuration Control Point
pub const RECONNECTION_CONFIGURATION_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b1f);

/// Bluetooth characteristic UUID.
///
/// `0x2b20` IDD Status Changed
pub const IDD_STATUS_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2b20);

/// Bluetooth characteristic UUID.
///
/// `0x2b21` IDD Status
pub const IDD_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2b21);

/// Bluetooth characteristic UUID.
///
/// `0x2b22` IDD Annunciation Status
pub const IDD_ANNUNCIATION_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2b22);

/// Bluetooth characteristic UUID.
///
/// `0x2b23` IDD Features
pub const IDD_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2b23);

/// Bluetooth characteristic UUID.
///
/// `0x2b24` IDD Status Reader Control Point
pub const IDD_STATUS_READER_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b24);

/// Bluetooth characteristic UUID.
///
/// `0x2b25` IDD Command Control Point
pub const IDD_COMMAND_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b25);

/// Bluetooth characteristic UUID.
///
/// `0x2b26` IDD Command Data
pub const IDD_COMMAND_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b26);

/// Bluetooth characteristic UUID.
///
/// `0x2b27` IDD Record Access Control Point
pub const IDD_RECORD_ACCESS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b27);

/// Bluetooth characteristic UUID.
///
/// `0x2b28` IDD History Data
pub const IDD_HISTORY_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b28);

/// Bluetooth characteristic UUID.
///
/// `0x2b29` Client Supported Features
pub const CLIENT_SUPPORTED_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2b29);

/// Bluetooth characteristic UUID.
///
/// `0x2b2a` Database Hash
pub const DATABASE_HASH: BluetoothUuid16 = BluetoothUuid16::new(0x2b2a);

/// Bluetooth characteristic UUID.
///
/// `0x2b2b` BSS Control Point
pub const BSS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b2b);

/// Bluetooth characteristic UUID.
///
/// `0x2b2c` BSS Response
pub const BSS_RESPONSE: BluetoothUuid16 = BluetoothUuid16::new(0x2b2c);

/// Bluetooth characteristic UUID.
///
/// `0x2b2d` Emergency ID
pub const EMERGENCY_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b2d);

/// Bluetooth characteristic UUID.
///
/// `0x2b2e` Emergency Text
pub const EMERGENCY_TEXT: BluetoothUuid16 = BluetoothUuid16::new(0x2b2e);

/// Bluetooth characteristic UUID.
///
/// `0x2b2f` ACS Status
pub const ACS_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2b2f);

/// Bluetooth characteristic UUID.
///
/// `0x2b30` ACS Data In
pub const ACS_DATA_IN: BluetoothUuid16 = BluetoothUuid16::new(0x2b30);

/// Bluetooth characteristic UUID.
///
/// `0x2b31` ACS Data Out Notify
pub const ACS_DATA_OUT_NOTIFY: BluetoothUuid16 = BluetoothUuid16::new(0x2b31);

/// Bluetooth characteristic UUID.
///
/// `0x2b32` ACS Data Out Indicate
pub const ACS_DATA_OUT_INDICATE: BluetoothUuid16 = BluetoothUuid16::new(0x2b32);

/// Bluetooth characteristic UUID.
///
/// `0x2b33` ACS Control Point
pub const ACS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b33);

/// Bluetooth characteristic UUID.
///
/// `0x2b34` Enhanced Blood Pressure Measurement
///
/// The Enhanced Blood Pressure Measurement characteristic is used to represent data related to a blood pressure measurement that includes a UTC time stamp and a user facing time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value (mmHg) |
/// | **Type** | struct |
/// | **Size** | 0 or 6 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/blood_pressure_measurement_compound_value_(mmhg)`.
/// Present if bit 0 of Flags field is set to 0
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Blood Pressure Measurement Compound Value (kPa) |
/// | **Type** | struct |
/// | **Size** | 0 or 6 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/blood_pressure_measurement_compound_value_(kpa)`.
/// Present if bit 0 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Unit: Seconds, since Epoch Start
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/time_stamp`.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pulse Rate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/user_id`.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Measurement Status |
/// | **Type** | boolean16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/measurement_status`.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User Facing Time |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Unit: Seconds, since Epoch Start
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/user_facing_time`.
/// Present if bit 5 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.enhanced_blood_pressure_measurement.yaml)
pub const ENHANCED_BLOOD_PRESSURE_MEASUREMENT: BluetoothUuid16 = BluetoothUuid16::new(0x2b34);

/// Bluetooth characteristic UUID.
///
/// `0x2b35` Enhanced Intermediate Cuff Pressure
///
/// The Enhanced Intermediate Cuff Pressure characteristic is used to represent enhanced intermediate Cuff Pressure values for display purposes while a measurement is in progress and includes a UTC time stamp and a user facing time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.enhanced_intermediate_cuff_pressure/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intermediate Cuff Pressure Value |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.pressure.millimetre_of_mercury
/// or
/// Base Unit: org.bluetooth.unit.pressure.pascal;
/// M = 1, d = 3, and b = 0
/// If bit 0 of the Flags field is set to 0, units are mmHG, else units are kPa.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Stamp |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Unit: Seconds since Epoch Start
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/time_stamp`.
/// Present if bit 1 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Pulse Rate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if bit 2 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User ID |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/user_id`.
/// Present if bit 3 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Measurement Status |
/// | **Type** | boolean16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_measurement/field/measurement_status`.
/// Present if bit 4 of Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | User Facing Time |
/// | **Type** | uint32 |
/// | **Size** | 0 or 4 |
///
/// ### Description
///
/// Unit: Seconds since Epoch Start
/// See `sec:org.bluetooth.characteristic.enhanced_blood_pressure_measurement/field/user_facing_time`.
/// Present if bit 5 of Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.enhanced_intermediate_cuff_pressure.yaml)
pub const ENHANCED_INTERMEDIATE_CUFF_PRESSURE: BluetoothUuid16 = BluetoothUuid16::new(0x2b35);

/// Bluetooth characteristic UUID.
///
/// `0x2b36` Blood Pressure Record
///
/// The Blood Pressure Record characteristic is a container that represents a stored value of a blood pressure measurement or of any other characteristic as specified by the service using the characteristic.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Segmentation Header |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.blood_pressure_record/field/segmentation_header`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sequence Number |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Contains a sequence number of the record. The sequence number starts at 0 and loops back to 0 after 65536 records (per user).
/// See `sec:org.bluetooth.characteristic.blood_pressure_record/field/sequence_number`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | UUID |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Contains the UUID of the contained characteristic value.
/// See `sec:org.bluetooth.characteristic.blood_pressure_record/field/uuid`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Recorded Characteristic |
/// | **Type** | Determined by UUID |
/// | **Size** | Variable |
///
/// ### Description
///
/// Contains a part of or a complete characteristic value.
/// See `sec:org.bluetooth.characteristic.blood_pressure_record/field/recorded_characteristic`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | E2E-CRC |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Contains the CRC over all the data of a complete single or multi-message record.
/// See `sec:org.bluetooth.characteristic.blood_pressure_record/field/e2e-crc`.
/// The presence of this field is defined by the service using this characteristic.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.blood_pressure_record.yaml)
pub const BLOOD_PRESSURE_RECORD: BluetoothUuid16 = BluetoothUuid16::new(0x2b36);

/// Bluetooth characteristic UUID.
///
/// `0x2b37` Registered User
pub const REGISTERED_USER: BluetoothUuid16 = BluetoothUuid16::new(0x2b37);

/// Bluetooth characteristic UUID.
///
/// `0x2b38` BR-EDR Handover Data
pub const BR_EDR_HANDOVER_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b38);

/// Bluetooth characteristic UUID.
///
/// `0x2b39` Bluetooth SIG Data
pub const BLUETOOTH_SIG_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b39);

/// Bluetooth characteristic UUID.
///
/// `0x2b3a` Server Supported Features
pub const SERVER_SUPPORTED_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2b3a);

/// Bluetooth characteristic UUID.
///
/// `0x2b3b` Physical Activity Monitor Features
pub const PHYSICAL_ACTIVITY_MONITOR_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2b3b);

/// Bluetooth characteristic UUID.
///
/// `0x2b3c` General Activity Instantaneous Data
pub const GENERAL_ACTIVITY_INSTANTANEOUS_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b3c);

/// Bluetooth characteristic UUID.
///
/// `0x2b3d` General Activity Summary Data
pub const GENERAL_ACTIVITY_SUMMARY_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b3d);

/// Bluetooth characteristic UUID.
///
/// `0x2b3e` CardioRespiratory Activity Instantaneous Data
pub const CARDIORESPIRATORY_ACTIVITY_INSTANTANEOUS_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b3e);

/// Bluetooth characteristic UUID.
///
/// `0x2b3f` CardioRespiratory Activity Summary Data
pub const CARDIORESPIRATORY_ACTIVITY_SUMMARY_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b3f);

/// Bluetooth characteristic UUID.
///
/// `0x2b40` Step Counter Activity Summary Data
pub const STEP_COUNTER_ACTIVITY_SUMMARY_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b40);

/// Bluetooth characteristic UUID.
///
/// `0x2b41` Sleep Activity Instantaneous Data
pub const SLEEP_ACTIVITY_INSTANTANEOUS_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b41);

/// Bluetooth characteristic UUID.
///
/// `0x2b42` Sleep Activity Summary Data
pub const SLEEP_ACTIVITY_SUMMARY_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b42);

/// Bluetooth characteristic UUID.
///
/// `0x2b43` Physical Activity Monitor Control Point
pub const PHYSICAL_ACTIVITY_MONITOR_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b43);

/// Bluetooth characteristic UUID.
///
/// `0x2b44` Physical Activity Current Session
pub const PHYSICAL_ACTIVITY_CURRENT_SESSION: BluetoothUuid16 = BluetoothUuid16::new(0x2b44);

/// Bluetooth characteristic UUID.
///
/// `0x2b45` Physical Activity Session Descriptor
pub const PHYSICAL_ACTIVITY_SESSION_DESCRIPTOR: BluetoothUuid16 = BluetoothUuid16::new(0x2b45);

/// Bluetooth characteristic UUID.
///
/// `0x2b46` Preferred Units
///
/// The Preferred Units characteristic is the list of units the user prefers.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Units |
/// | **Type** | uint16 1-256 |
/// | **Size** | 2–512 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.preferred_units/field/units`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.preferred_units.yaml)
pub const PREFERRED_UNITS: BluetoothUuid16 = BluetoothUuid16::new(0x2b46);

/// Bluetooth characteristic UUID.
///
/// `0x2b47` High Resolution Height
///
/// The High Resolution Height characteristic is used to represent the height of a user and is used when a resolution of 0.1 mm is required.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Height |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.meter
/// Represented values: M = 1, d = -4, b = 0
/// Unit is meter with 0.0001 m (e.g., 0.1 mm)
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.high_resolution_height.yaml)
pub const HIGH_RESOLUTION_HEIGHT: BluetoothUuid16 = BluetoothUuid16::new(0x2b47);

/// Bluetooth characteristic UUID.
///
/// `0x2b48` Middle Name
///
/// The Middle Name characteristic is used to represent the middle name of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Middle Name |
/// | **Type** | utf8s |
/// | **Size** | variable |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.middle_name.yaml)
pub const MIDDLE_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2b48);

/// Bluetooth characteristic UUID.
///
/// `0x2b49` Stride Length
///
/// The Stride Length characteristic is used to represent the stride length of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Stride Length |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = -3, b = 0
/// Unit is meter with a resolution of 0.001 m (e.g., 1 mm)
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.stride_length.yaml)
pub const STRIDE_LENGTH: BluetoothUuid16 = BluetoothUuid16::new(0x2b49);

/// Bluetooth characteristic UUID.
///
/// `0x2b4a` Handedness
///
/// The Handedness characteristic is used to represent the handedness of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Handedness |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.handedness/field/handedness`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.handedness.yaml)
pub const HANDEDNESS: BluetoothUuid16 = BluetoothUuid16::new(0x2b4a);

/// Bluetooth characteristic UUID.
///
/// `0x2b4b` Device Wearing Position
///
/// The Device Wearing Position characteristic is used to represent the position where a user is wearing the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Device Wearing Position |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.device_wearing_position/field/device_wearing_position`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.device_wearing_position.yaml)
pub const DEVICE_WEARING_POSITION: BluetoothUuid16 = BluetoothUuid16::new(0x2b4b);

/// Bluetooth characteristic UUID.
///
/// `0x2b4c` Four Zone Heart Rate Limits
///
/// The Four Zone Heart Rate Limits characteristic is used to represent the limits between the heart rate zones for the four-zone heart rate definition (Maximum, Hard, Moderate, and Light) of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Four Zone Heart Rate Limits - Light / Moderate Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Four Zone Heart Rate Limits - Moderate / Hard Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Four Zone Heart Rate Limits - Hard / Maximum Limit |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.four_zone_heart_rate_limits.yaml)
pub const FOUR_ZONE_HEART_RATE_LIMITS: BluetoothUuid16 = BluetoothUuid16::new(0x2b4c);

/// Bluetooth characteristic UUID.
///
/// `0x2b4d` High Intensity Exercise Threshold
///
/// The High Intensity Exercise Threshold characteristic is used to represent the high intensity exercise threshold of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Field Selector |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.high_intensity_exercise_threshold/field/field_selector`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Threshold as Energy Expenditure per Hour |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.energy.joule
/// Represented values: M = 1, d = 3, b = 0
/// Unit is joule with a resolution of 1000 joules
/// Present if value of Field Selector field is 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Threshold as Metabolic Equivalent |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.metabolic_equivalent
/// Represented values: M = 1, d = -1, b = 0
/// Unit is MET with a resolution of 0.1 MET (i.e., kcal/kg/hour)
/// Present if value of Field Selector field is 2
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Threshold as Percentage of Maximum Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.percentage
/// Present if value of Field Selector field is 3
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Threshold as Heart Rate |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.period.beats_per_minute
/// Present if value of Field Selector field is 4
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.high_intensity_exercise_threshold.yaml)
pub const HIGH_INTENSITY_EXERCISE_THRESHOLD: BluetoothUuid16 = BluetoothUuid16::new(0x2b4d);

/// Bluetooth characteristic UUID.
///
/// `0x2b4e` Activity Goal
///
/// The Activity Goal characteristic is used to represent the goal or target of a user, such as number of steps or total energy expenditure, related to a physical activity session.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Presence Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.activity_goal/field/presence_flags`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Total Energy Expenditure |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.energy.joule
/// Represented values: M = 1, d = 3, b = 0
/// Unit is joule with a resolution of 1000 J.
/// Present if bit 0 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Normal Walking Steps |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// Present if bit 1 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Intensity Steps |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// Present if bit 2 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Floor Steps |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.unitless
/// Present if bit 3 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Distance |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = 1, b = 0
/// Unit is meter with a resolution of 1 m.
/// Present if bit 4 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Duration of Normal Walking |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// Present if bit 5 of Presence Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Duration of Intensity Walking |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// Present if bit 6 of Presence Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.activity_goal.yaml)
pub const ACTIVITY_GOAL: BluetoothUuid16 = BluetoothUuid16::new(0x2b4e);

/// Bluetooth characteristic UUID.
///
/// `0x2b4f` Sedentary Interval Notification
///
/// The Sedentary Interval Notification characteristic is used to represent the sedentary interval notification of a user. The sedentary interval notification is the sedentary time interval after which a user wants to be notified.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sedentary Interval Notification |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.time.second
/// See `sec:org.bluetooth.characteristic.sedentary_interval_notification/field/sedentary_interval_notification`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sedentary_interval_notification.yaml)
pub const SEDENTARY_INTERVAL_NOTIFICATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b4f);

/// Bluetooth characteristic UUID.
///
/// `0x2b50` Caloric Intake
///
/// The Caloric Intake characteristic is used to represent the calorie intake per day of a user.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Caloric Intake |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.energy.kilogram_calorie
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.caloric_intake.yaml)
pub const CALORIC_INTAKE: BluetoothUuid16 = BluetoothUuid16::new(0x2b50);

/// Bluetooth characteristic UUID.
///
/// `0x2b51` TMAP Role
pub const TMAP_ROLE: BluetoothUuid16 = BluetoothUuid16::new(0x2b51);

/// Bluetooth characteristic UUID.
///
/// `0x2b77` Audio Input State
pub const AUDIO_INPUT_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2b77);

/// Bluetooth characteristic UUID.
///
/// `0x2b78` Gain Settings Attribute
pub const GAIN_SETTINGS_ATTRIBUTE: BluetoothUuid16 = BluetoothUuid16::new(0x2b78);

/// Bluetooth characteristic UUID.
///
/// `0x2b79` Audio Input Type
pub const AUDIO_INPUT_TYPE: BluetoothUuid16 = BluetoothUuid16::new(0x2b79);

/// Bluetooth characteristic UUID.
///
/// `0x2b7a` Audio Input Status
pub const AUDIO_INPUT_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2b7a);

/// Bluetooth characteristic UUID.
///
/// `0x2b7b` Audio Input Control Point
pub const AUDIO_INPUT_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b7b);

/// Bluetooth characteristic UUID.
///
/// `0x2b7c` Audio Input Description
pub const AUDIO_INPUT_DESCRIPTION: BluetoothUuid16 = BluetoothUuid16::new(0x2b7c);

/// Bluetooth characteristic UUID.
///
/// `0x2b7d` Volume State
pub const VOLUME_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2b7d);

/// Bluetooth characteristic UUID.
///
/// `0x2b7e` Volume Control Point
pub const VOLUME_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b7e);

/// Bluetooth characteristic UUID.
///
/// `0x2b7f` Volume Flags
pub const VOLUME_FLAGS: BluetoothUuid16 = BluetoothUuid16::new(0x2b7f);

/// Bluetooth characteristic UUID.
///
/// `0x2b80` Volume Offset State
pub const VOLUME_OFFSET_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2b80);

/// Bluetooth characteristic UUID.
///
/// `0x2b81` Audio Location
pub const AUDIO_LOCATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b81);

/// Bluetooth characteristic UUID.
///
/// `0x2b82` Volume Offset Control Point
pub const VOLUME_OFFSET_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b82);

/// Bluetooth characteristic UUID.
///
/// `0x2b83` Audio Output Description
pub const AUDIO_OUTPUT_DESCRIPTION: BluetoothUuid16 = BluetoothUuid16::new(0x2b83);

/// Bluetooth characteristic UUID.
///
/// `0x2b84` Set Identity Resolving Key
pub const SET_IDENTITY_RESOLVING_KEY: BluetoothUuid16 = BluetoothUuid16::new(0x2b84);

/// Bluetooth characteristic UUID.
///
/// `0x2b85` Coordinated Set Size
pub const COORDINATED_SET_SIZE: BluetoothUuid16 = BluetoothUuid16::new(0x2b85);

/// Bluetooth characteristic UUID.
///
/// `0x2b86` Set Member Lock
pub const SET_MEMBER_LOCK: BluetoothUuid16 = BluetoothUuid16::new(0x2b86);

/// Bluetooth characteristic UUID.
///
/// `0x2b87` Set Member Rank
pub const SET_MEMBER_RANK: BluetoothUuid16 = BluetoothUuid16::new(0x2b87);

/// Bluetooth characteristic UUID.
///
/// `0x2b88` Encrypted Data Key Material
pub const ENCRYPTED_DATA_KEY_MATERIAL: BluetoothUuid16 = BluetoothUuid16::new(0x2b88);

/// Bluetooth characteristic UUID.
///
/// `0x2b89` Apparent Energy 32
///
/// The Apparent Energy 32 characteristic is used to represent the integral of Apparent Power over a time interval.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Apparent Energy 32 |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Unit is kilovolt ampere hour with resolution of 1 volt ampere hour.
/// Minimum: 0
/// Maximum: 4294967.293
/// Represented values: M = 1, d = -3, b = 0
/// Unit: org.bluetooth.unit. electrical_apparent_energy.kilovolt_ampere_hour
/// A value of 0xFFFFFFFE represents "value is not valid".
/// A value of 0xFFFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.apparent_energy_32.yaml)
pub const APPARENT_ENERGY_32: BluetoothUuid16 = BluetoothUuid16::new(0x2b89);

/// Bluetooth characteristic UUID.
///
/// `0x2b8a` Apparent Power
///
/// The Apparent Power characteristic is used to represent the product of the quadratic mean values of voltage and current.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Apparent Power |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is volt ampere with resolution of 0.1.
/// Minimum: 0
/// Maximum: 1677721.3
/// Represented values: M = 1, d = -1, b = 0
/// Unit: org.bluetooth.unit. electrical_apparent_power.volt_ampere
/// A value of 0xFFFFFE represents "value is not valid".
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.apparent_power.yaml)
pub const APPARENT_POWER: BluetoothUuid16 = BluetoothUuid16::new(0x2b8a);

/// Bluetooth characteristic UUID.
///
/// `0x2b8b` Live Health Observations
pub const LIVE_HEALTH_OBSERVATIONS: BluetoothUuid16 = BluetoothUuid16::new(0x2b8b);

/// Bluetooth characteristic UUID.
///
/// `0x2b8c` CO\textsubscript{2} Concentration
///
/// The CO\textsubscript{2` Concentration characteristic is used to represent a measure of carbon dioxide concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | CO\textsubscript{2} Concentration |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is parts per million (ppm) with a resolution of 1.
/// Unit: org.bluetooth.unit.ppm
/// Represented values: M = 1, d = 0, b =0
/// Allowed range is: 0 to 65533.
/// A value of 0xFFFE represents "value is 65534 or greater".
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.co2_concentration.yaml)
pub const CO2_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b8c);

/// Bluetooth characteristic UUID.
///
/// `0x2b8d` Cosine of the Angle
///
/// The Cosine of the Angle characteristic represents a value of the cosine of an angle.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Cosine of the Angle |
/// | **Type** | sint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// This is a unitless value, expressed as Cos(θ) x 100, with a resolution of 1.
/// Unit: org.bluetooth.unit.unitless
/// Minimum: -100
/// Maximum: 100
/// Represented values: M = 1, d = -2, b = 0
/// A raw value of 0x7F represents "value is not known".
/// All other values are prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.cosine_of_the_angle.yaml)
pub const COSINE_OF_THE_ANGLE: BluetoothUuid16 = BluetoothUuid16::new(0x2b8d);

/// Bluetooth characteristic UUID.
///
/// `0x2b8e` Device Time Feature
pub const DEVICE_TIME_FEATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2b8e);

/// Bluetooth characteristic UUID.
///
/// `0x2b8f` Device Time Parameters
pub const DEVICE_TIME_PARAMETERS: BluetoothUuid16 = BluetoothUuid16::new(0x2b8f);

/// Bluetooth characteristic UUID.
///
/// `0x2b90` Device Time
pub const DEVICE_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2b90);

/// Bluetooth characteristic UUID.
///
/// `0x2b91` Device Time Control Point
pub const DEVICE_TIME_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2b91);

/// Bluetooth characteristic UUID.
///
/// `0x2b92` Time Change Log Data
pub const TIME_CHANGE_LOG_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2b92);

/// Bluetooth characteristic UUID.
///
/// `0x2b93` Media Player Name
pub const MEDIA_PLAYER_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2b93);

/// Bluetooth characteristic UUID.
///
/// `0x2b94` Media Player Icon Object ID
pub const MEDIA_PLAYER_ICON_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b94);

/// Bluetooth characteristic UUID.
///
/// `0x2b95` Media Player Icon URL
pub const MEDIA_PLAYER_ICON_URL: BluetoothUuid16 = BluetoothUuid16::new(0x2b95);

/// Bluetooth characteristic UUID.
///
/// `0x2b96` Track Changed
pub const TRACK_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2b96);

/// Bluetooth characteristic UUID.
///
/// `0x2b97` Track Title
pub const TRACK_TITLE: BluetoothUuid16 = BluetoothUuid16::new(0x2b97);

/// Bluetooth characteristic UUID.
///
/// `0x2b98` Track Duration
pub const TRACK_DURATION: BluetoothUuid16 = BluetoothUuid16::new(0x2b98);

/// Bluetooth characteristic UUID.
///
/// `0x2b99` Track Position
pub const TRACK_POSITION: BluetoothUuid16 = BluetoothUuid16::new(0x2b99);

/// Bluetooth characteristic UUID.
///
/// `0x2b9a` Playback Speed
pub const PLAYBACK_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2b9a);

/// Bluetooth characteristic UUID.
///
/// `0x2b9b` Seeking Speed
pub const SEEKING_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2b9b);

/// Bluetooth characteristic UUID.
///
/// `0x2b9c` Current Track Segments Object ID
pub const CURRENT_TRACK_SEGMENTS_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b9c);

/// Bluetooth characteristic UUID.
///
/// `0x2b9d` Current Track Object ID
pub const CURRENT_TRACK_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b9d);

/// Bluetooth characteristic UUID.
///
/// `0x2b9e` Next Track Object ID
pub const NEXT_TRACK_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b9e);

/// Bluetooth characteristic UUID.
///
/// `0x2b9f` Parent Group Object ID
pub const PARENT_GROUP_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2b9f);

/// Bluetooth characteristic UUID.
///
/// `0x2ba0` Current Group Object ID
pub const CURRENT_GROUP_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2ba0);

/// Bluetooth characteristic UUID.
///
/// `0x2ba1` Playing Order
pub const PLAYING_ORDER: BluetoothUuid16 = BluetoothUuid16::new(0x2ba1);

/// Bluetooth characteristic UUID.
///
/// `0x2ba2` Playing Orders Supported
pub const PLAYING_ORDERS_SUPPORTED: BluetoothUuid16 = BluetoothUuid16::new(0x2ba2);

/// Bluetooth characteristic UUID.
///
/// `0x2ba3` Media State
pub const MEDIA_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2ba3);

/// Bluetooth characteristic UUID.
///
/// `0x2ba4` Media Control Point
pub const MEDIA_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2ba4);

/// Bluetooth characteristic UUID.
///
/// `0x2ba5` Media Control Point Opcodes Supported
pub const MEDIA_CONTROL_POINT_OPCODES_SUPPORTED: BluetoothUuid16 = BluetoothUuid16::new(0x2ba5);

/// Bluetooth characteristic UUID.
///
/// `0x2ba6` Search Results Object ID
pub const SEARCH_RESULTS_OBJECT_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2ba6);

/// Bluetooth characteristic UUID.
///
/// `0x2ba7` Search Control Point
pub const SEARCH_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2ba7);

/// Bluetooth characteristic UUID.
///
/// `0x2ba8` Energy 32
///
/// The Energy 32 characteristic is used to represent a measure of energy.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Energy 32 |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Unit is kilowatt-hour with a resolution of 1 Watt–hour.
/// Minimum: 0
/// Maximum: 4294967.293
/// Represented values: M = 1, d = -3, b = 0
/// Unit: org.bluetooth.unit.energy.kilowatt_hour
/// A value of 0xFFFFFFFE represents "value is not valid".
/// A value of 0xFFFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.energy_32.yaml)
pub const ENERGY_32: BluetoothUuid16 = BluetoothUuid16::new(0x2ba8);

/// Bluetooth characteristic UUID.
///
/// `0x2bad` Constant Tone Extension Enable
pub const CONSTANT_TONE_EXTENSION_ENABLE: BluetoothUuid16 = BluetoothUuid16::new(0x2bad);

/// Bluetooth characteristic UUID.
///
/// `0x2bae` Advertising Constant Tone Extension Minimum Length
pub const ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_LENGTH: BluetoothUuid16 = BluetoothUuid16::new(0x2bae);

/// Bluetooth characteristic UUID.
///
/// `0x2baf` Advertising Constant Tone Extension Minimum Transmit Count
pub const ADVERTISING_CONSTANT_TONE_EXTENSION_MINIMUM_TRANSMIT_COUNT: BluetoothUuid16 = BluetoothUuid16::new(0x2baf);

/// Bluetooth characteristic UUID.
///
/// `0x2bb0` Advertising Constant Tone Extension Transmit Duration
pub const ADVERTISING_CONSTANT_TONE_EXTENSION_TRANSMIT_DURATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bb0);

/// Bluetooth characteristic UUID.
///
/// `0x2bb1` Advertising Constant Tone Extension Interval
pub const ADVERTISING_CONSTANT_TONE_EXTENSION_INTERVAL: BluetoothUuid16 = BluetoothUuid16::new(0x2bb1);

/// Bluetooth characteristic UUID.
///
/// `0x2bb2` Advertising Constant Tone Extension PHY
pub const ADVERTISING_CONSTANT_TONE_EXTENSION_PHY: BluetoothUuid16 = BluetoothUuid16::new(0x2bb2);

/// Bluetooth characteristic UUID.
///
/// `0x2bb3` Bearer Provider Name
pub const BEARER_PROVIDER_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2bb3);

/// Bluetooth characteristic UUID.
///
/// `0x2bb4` Bearer UCI
pub const BEARER_UCI: BluetoothUuid16 = BluetoothUuid16::new(0x2bb4);

/// Bluetooth characteristic UUID.
///
/// `0x2bb5` Bearer Technology
pub const BEARER_TECHNOLOGY: BluetoothUuid16 = BluetoothUuid16::new(0x2bb5);

/// Bluetooth characteristic UUID.
///
/// `0x2bb6` Bearer URI Schemes Supported List
pub const BEARER_URI_SCHEMES_SUPPORTED_LIST: BluetoothUuid16 = BluetoothUuid16::new(0x2bb6);

/// Bluetooth characteristic UUID.
///
/// `0x2bb7` Bearer Signal Strength
pub const BEARER_SIGNAL_STRENGTH: BluetoothUuid16 = BluetoothUuid16::new(0x2bb7);

/// Bluetooth characteristic UUID.
///
/// `0x2bb8` Bearer Signal Strength Reporting Interval
pub const BEARER_SIGNAL_STRENGTH_REPORTING_INTERVAL: BluetoothUuid16 = BluetoothUuid16::new(0x2bb8);

/// Bluetooth characteristic UUID.
///
/// `0x2bb9` Bearer List Current Calls
pub const BEARER_LIST_CURRENT_CALLS: BluetoothUuid16 = BluetoothUuid16::new(0x2bb9);

/// Bluetooth characteristic UUID.
///
/// `0x2bba` Content Control ID
///
/// The Content Control ID (CCID) characteristic is used to represent a unique instance of a service that either controls or provides status information on an audio-related feature. Examples of audio-related features include media players and telephone bearers. The value of a CCID characteristic is a unique identifier for each instance of the characteristic on the device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Content Control ID |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// The ID of the content control service instance containing this characteristic.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.content_control_id.yaml)
pub const CONTENT_CONTROL_ID: BluetoothUuid16 = BluetoothUuid16::new(0x2bba);

/// Bluetooth characteristic UUID.
///
/// `0x2bbb` Status Flags
pub const STATUS_FLAGS: BluetoothUuid16 = BluetoothUuid16::new(0x2bbb);

/// Bluetooth characteristic UUID.
///
/// `0x2bbc` Incoming Call Target Bearer URI
pub const INCOMING_CALL_TARGET_BEARER_URI: BluetoothUuid16 = BluetoothUuid16::new(0x2bbc);

/// Bluetooth characteristic UUID.
///
/// `0x2bbd` Call State
pub const CALL_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2bbd);

/// Bluetooth characteristic UUID.
///
/// `0x2bbe` Call Control Point
pub const CALL_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bbe);

/// Bluetooth characteristic UUID.
///
/// `0x2bbf` Call Control Point Optional Opcodes
pub const CALL_CONTROL_POINT_OPTIONAL_OPCODES: BluetoothUuid16 = BluetoothUuid16::new(0x2bbf);

/// Bluetooth characteristic UUID.
///
/// `0x2bc0` Termination Reason
pub const TERMINATION_REASON: BluetoothUuid16 = BluetoothUuid16::new(0x2bc0);

/// Bluetooth characteristic UUID.
///
/// `0x2bc1` Incoming Call
pub const INCOMING_CALL: BluetoothUuid16 = BluetoothUuid16::new(0x2bc1);

/// Bluetooth characteristic UUID.
///
/// `0x2bc2` Call Friendly Name
pub const CALL_FRIENDLY_NAME: BluetoothUuid16 = BluetoothUuid16::new(0x2bc2);

/// Bluetooth characteristic UUID.
///
/// `0x2bc3` Mute
pub const MUTE: BluetoothUuid16 = BluetoothUuid16::new(0x2bc3);

/// Bluetooth characteristic UUID.
///
/// `0x2bc4` Sink ASE
pub const SINK_ASE: BluetoothUuid16 = BluetoothUuid16::new(0x2bc4);

/// Bluetooth characteristic UUID.
///
/// `0x2bc5` Source ASE
pub const SOURCE_ASE: BluetoothUuid16 = BluetoothUuid16::new(0x2bc5);

/// Bluetooth characteristic UUID.
///
/// `0x2bc6` ASE Control Point
pub const ASE_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bc6);

/// Bluetooth characteristic UUID.
///
/// `0x2bc7` Broadcast Audio Scan Control Point
pub const BROADCAST_AUDIO_SCAN_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bc7);

/// Bluetooth characteristic UUID.
///
/// `0x2bc8` Broadcast Receive State
pub const BROADCAST_RECEIVE_STATE: BluetoothUuid16 = BluetoothUuid16::new(0x2bc8);

/// Bluetooth characteristic UUID.
///
/// `0x2bc9` Sink PAC
pub const SINK_PAC: BluetoothUuid16 = BluetoothUuid16::new(0x2bc9);

/// Bluetooth characteristic UUID.
///
/// `0x2bca` Sink Audio Locations
pub const SINK_AUDIO_LOCATIONS: BluetoothUuid16 = BluetoothUuid16::new(0x2bca);

/// Bluetooth characteristic UUID.
///
/// `0x2bcb` Source PAC
pub const SOURCE_PAC: BluetoothUuid16 = BluetoothUuid16::new(0x2bcb);

/// Bluetooth characteristic UUID.
///
/// `0x2bcc` Source Audio Locations
pub const SOURCE_AUDIO_LOCATIONS: BluetoothUuid16 = BluetoothUuid16::new(0x2bcc);

/// Bluetooth characteristic UUID.
///
/// `0x2bcd` Available Audio Contexts
pub const AVAILABLE_AUDIO_CONTEXTS: BluetoothUuid16 = BluetoothUuid16::new(0x2bcd);

/// Bluetooth characteristic UUID.
///
/// `0x2bce` Supported Audio Contexts
pub const SUPPORTED_AUDIO_CONTEXTS: BluetoothUuid16 = BluetoothUuid16::new(0x2bce);

/// Bluetooth characteristic UUID.
///
/// `0x2bcf` Ammonia Concentration
///
/// The Ammonia Concentration characteristic is used to represent a measure of ammonia (NH\textsubscript{3`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ammonia Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ammonia_concentration.yaml)
pub const AMMONIA_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bcf);

/// Bluetooth characteristic UUID.
///
/// `0x2bd0` Carbon Monoxide Concentration
///
/// The Carbon Monoxide Concentration characteristic is used to represent a measure of carbon monoxide (CO) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Carbon Monoxide Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.carbon_monoxide_concentration.yaml)
pub const CARBON_MONOXIDE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd0);

/// Bluetooth characteristic UUID.
///
/// `0x2bd1` Methane Concentration
///
/// The Methane Concentration characteristic is used to represent a measure of methane (CH\textsubscript{4`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Methane Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.concentration.parts_per_billion
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.methane_concentration.yaml)
pub const METHANE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd1);

/// Bluetooth characteristic UUID.
///
/// `0x2bd2` Nitrogen Dioxide Concentration
///
/// The Nitrogen Dioxide Concentration characteristic is used to represent a measure of nitrogen dioxide (NO\textsubscript{2`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Nitrogen Dioxide Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.nitrogen_dioxide_concentration.yaml)
pub const NITROGEN_DIOXIDE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd2);

/// Bluetooth characteristic UUID.
///
/// `0x2bd3` Non-Methane Volatile Organic Compounds Concentration
///
/// The Non-Methane Volatile Organic Compounds Concentration characteristic is used to represent a measure of non-methane volatile organic compounds (NMVOCs) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Non-Methane Volatile Organic Compounds Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.non-methane_volatile_organic_compounds_concentration.yaml)
pub const NON_METHANE_VOLATILE_ORGANIC_COMPOUNDS_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd3);

/// Bluetooth characteristic UUID.
///
/// `0x2bd4` Ozone Concentration
///
/// The Ozone Concentration characteristic is used to represent a measure of ozone (O\textsubscript{3`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Ozone Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.ozone_concentration.yaml)
pub const OZONE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd4);

/// Bluetooth characteristic UUID.
///
/// `0x2bd5` Particulate Matter - PM1 Concentration
pub const PARTICULATE_MATTER_PM1_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd5);

/// Bluetooth characteristic UUID.
///
/// `0x2bd6` Particulate Matter - PM2.5 Concentration
pub const PARTICULATE_MATTER_PM25_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd6);

/// Bluetooth characteristic UUID.
///
/// `0x2bd7` Particulate Matter - PM10 Concentration
pub const PARTICULATE_MATTER_PM10_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd7);

/// Bluetooth characteristic UUID.
///
/// `0x2bd8` Sulfur Dioxide Concentration
///
/// The Sulfur Dioxide Concentration characteristic is used to represent a measure of sulfur dioxide (SO\textsubscript{2`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sulfur Dioxide Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sulfur_dioxide_concentration.yaml)
pub const SULFUR_DIOXIDE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd8);

/// Bluetooth characteristic UUID.
///
/// `0x2bd9` Sulfur Hexafluoride Concentration
///
/// The Sulfur Hexafluoride Concentration characteristic is used to represent a measure of sulfur hexafluoride (SF\textsubscript{6`) concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Sulfur Hexafluoride Concentration |
/// | **Type** | medfloat16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.density.kilogram_per_cubic_meter
/// The special value NRes is used to report a value outside the available range and resolution, possibly resulting from an overflow or underflow situation.
/// The special value NaN is used to report an invalid result from a computation step or to indicate missing data due to the hardware’s inability to provide a valid measurement, perhaps from sensor perturbation.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.sulfur_hexafluoride_concentration.yaml)
pub const SULFUR_HEXAFLUORIDE_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bd9);

/// Bluetooth characteristic UUID.
///
/// `0x2bda` Hearing Aid Features
pub const HEARING_AID_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2bda);

/// Bluetooth characteristic UUID.
///
/// `0x2bdb` Hearing Aid Preset Control Point
pub const HEARING_AID_PRESET_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bdb);

/// Bluetooth characteristic UUID.
///
/// `0x2bdc` Active Preset Index
pub const ACTIVE_PRESET_INDEX: BluetoothUuid16 = BluetoothUuid16::new(0x2bdc);

/// Bluetooth characteristic UUID.
///
/// `0x2bdd` Stored Health Observations
pub const STORED_HEALTH_OBSERVATIONS: BluetoothUuid16 = BluetoothUuid16::new(0x2bdd);

/// Bluetooth characteristic UUID.
///
/// `0x2bde` Fixed String 64
///
/// The Fixed String 64 characteristic is used to represent a variable-length UTF-8 string with a maximum length of 64 octets, see Volume 1, Part E, Section 2.9.3 in [1].
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Fixed String 64 |
/// | **Type** | utf8s\{64\} |
/// | **Size** | 64 |
///
/// ### Description
///
/// UTF-8 string
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.fixed_string_64.yaml)
pub const FIXED_STRING_64: BluetoothUuid16 = BluetoothUuid16::new(0x2bde);

/// Bluetooth characteristic UUID.
///
/// `0x2bdf` High Temperature
///
/// The High Temperature characteristic is used to represent a temperature within a wide range of possible temperatures.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | High Temperature |
/// | **Type** | sint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is degree Celsius with a resolution of 0.5.
/// Minimum value: -273
/// Maximum value: 16383.5
/// Represented values: M = 1, d = 0, b = -1
/// Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// A value of 0x8001 represents "value is not valid".
/// A value of 0x8000 represents "value is not known".
/// All other values are prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.high_temperature.yaml)
pub const HIGH_TEMPERATURE: BluetoothUuid16 = BluetoothUuid16::new(0x2bdf);

/// Bluetooth characteristic UUID.
///
/// `0x2be0` High Voltage
///
/// The High Voltage characteristic is used to represent a measure of positive electric potential difference.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | High Voltage |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is volt with a resolution of 1/64V.
/// Minimum: 0.0
/// Maximum: 262143.97
/// Represented values: M = 1, d = 0, b = 6
/// Unit: org.bluetooth.unit.electric_potential_difference.volt
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.high_voltage.yaml)
pub const HIGH_VOLTAGE: BluetoothUuid16 = BluetoothUuid16::new(0x2be0);

/// Bluetooth characteristic UUID.
///
/// `0x2be1` Light Distribution
///
/// The Light Distribution characteristic is used to represent the projected pattern of outdoor light that a fixture disperses onto a surface. This type of lighting is used in the middle of a pathway and is great for narrow pathways. Type II is commonly used on larger walkways and in roadway lighting because it is good for a larger but still narrow areas. This type is often used on side streets or jogging paths. Type III is very commonly used in roadway lighting, because it gives a bit more coverage further from the point source outward. Type III lighting needs to be placed to the side of the area, allowing the light to project outward and fill the area. Type IV light distribution produces a semicircular light that is intended to be used on the sides of buildings and walls. This type also does a great job lighting up a parking area perimeter.
/// Type V, the widest distribution pattern, is excellent for illuminating the inside portions of a parking lot, or for a 4-way intersection.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Light Distribution |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.light_distribution/field/light_distribution`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.light_distribution.yaml)
pub const LIGHT_DISTRIBUTION: BluetoothUuid16 = BluetoothUuid16::new(0x2be1);

/// Bluetooth characteristic UUID.
///
/// `0x2be2` Light Output
///
/// The Light Output characteristic is used to represent a measure of the total quantity of visible light emitted by a source per unit of time.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Light Output |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Unit is Lumen with resolution of 1.
/// Minimum is 0
/// Maximum 16777213
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.illuminance.lumen
/// A value of 0xFFFFFE represents "value is not valid".
/// A value of 0xFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.light_output.yaml)
pub const LIGHT_OUTPUT: BluetoothUuid16 = BluetoothUuid16::new(0x2be2);

/// Bluetooth characteristic UUID.
///
/// `0x2be3` Light Source Type
///
/// The Light Source Type characteristic is used to represent the means by which a luminaire generates light.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Light Source Type |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.light_source_type/field/light_source_type`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.light_source_type.yaml)
pub const LIGHT_SOURCE_TYPE: BluetoothUuid16 = BluetoothUuid16::new(0x2be3);

/// Bluetooth characteristic UUID.
///
/// `0x2be4` Noise
///
/// The Noise characteristic is used to represent a measure of sound pressure level.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Noise |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is decibel with a resolution of 1.
/// Unit: org.bluetooth.unit.sound_pressure.decibel_spl
/// Allowed range is: 0 to 253.
/// A value of 0xFE represents ‘value is 254 or greater’.
/// A value of 0xFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.noise.yaml)
pub const NOISE: BluetoothUuid16 = BluetoothUuid16::new(0x2be4);

/// Bluetooth characteristic UUID.
///
/// `0x2be5` Relative Runtime in a Correlated Color Temperature Range
///
/// The Relative Runtime in a Correlated Color Temperature Range characteristic is used to represent a relative runtime in a correlated color temperature range.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Relative Runtime |
/// | **Type** | struct |
/// | **Size** | 1 |
///
/// ### Description
///
/// Refer to Percentage 8 characteristic in `sec:org.bluetooth.characteristic.percentage_8`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Minimum Correlated Color Temperature |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Correlated Color Temperature characteristic in `sec:org.bluetooth.characteristic.correlated_color_temperature`
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Maximum Correlated Color Temperature |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Refer to Correlated Color Temperature characteristic in `sec:org.bluetooth.characteristic.correlated_color_temperature`
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.relative_runtime_in_a_correlated_color_temperature_range.yaml)
pub const RELATIVE_RUNTIME_IN_A_CORRELATED_COLOR_TEMPERATURE_RANGE: BluetoothUuid16 = BluetoothUuid16::new(0x2be5);

/// Bluetooth characteristic UUID.
///
/// `0x2be6` Time Second 32
///
/// The Time Second 32 characteristic is used to represent a period of time with a unit of 1 second.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time Second 32 |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Unit is second with a resolution of 1.
/// Minimum: 0
/// Maximum: 4294967294
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.time.second
/// A value of 0xFFFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.time_second_32.yaml)
pub const TIME_SECOND_32: BluetoothUuid16 = BluetoothUuid16::new(0x2be6);

/// Bluetooth characteristic UUID.
///
/// `0x2be7` VOC Concentration
///
/// The VOC Concentration characteristic is used to represent a measure of volatile organic compounds concentration.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | VOC Concentration |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is parts per billion (ppb) with a resolution of 1.
/// Unit: org.bluetooth.unit.ppb
/// Represented values: M = 1, d = 0, b =0
/// Allowed range is: 0 to 65533.
/// A value of 0xFFFE represents "value is 65534 or greater".
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.voc_concentration.yaml)
pub const VOC_CONCENTRATION: BluetoothUuid16 = BluetoothUuid16::new(0x2be7);

/// Bluetooth characteristic UUID.
///
/// `0x2be8` Voltage Frequency
///
/// The Voltage Frequency characteristic is used to represent power supply voltage frequency.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Voltage Frequency |
/// | **Type** | uint16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// Unit is hertz with resolution of 1.
/// Minimum: 1
/// Maximum: 65533
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.hertz
/// A value of 0 represents DC power supply.
/// A value of 0xFFFE represents "value is not valid".
/// A value of 0xFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.voltage_frequency.yaml)
pub const VOLTAGE_FREQUENCY: BluetoothUuid16 = BluetoothUuid16::new(0x2be8);

/// Bluetooth characteristic UUID.
///
/// `0x2be9` Battery Critical Status
///
/// The Battery Critical Status characteristic is used to represent that the device will possibly not function as expected due to low energy or service required.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Critical Status |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_critical_status/field/battery_critical_status`.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_critical_status.yaml)
pub const BATTERY_CRITICAL_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2be9);

/// Bluetooth characteristic UUID.
///
/// `0x2bea` Battery Health Status
///
/// The Battery Health Status characteristic is used to represent several aspects of battery health.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_health_status/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Health Summary |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Represents aggregation of the overall health of the battery where 100% represents new working condition and 0% represents the end of its expected lifetime when replacement is required. The value within this range is determined by the implementation.
/// Unit is percentage with a resolution of 1.
/// Allowed range is 0 to 100.
/// Base unit: org.bluetooth.unit.percentage
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Cycle Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Represents the count value of charge cycles where one charge cycle is a discharge equivalent to the capacity of the battery at full charge in its current condition.
/// Unit is unitless with a resolution of 1.
/// Present if bit 1 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Current Temperature |
/// | **Type** | sint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Represents the current temperature of the battery.
/// Base Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// A raw value of 0x7F represents: Greater than 126.
/// A raw value of 0x80 represents: Less than -127.
/// Present if bit 2 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Deep Discharge Count |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Represents the number of times the battery was completely discharged.
/// Unit is unitless with a resolution of 1.
/// Present if bit 3 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_health_status.yaml)
pub const BATTERY_HEALTH_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2bea);

/// Bluetooth characteristic UUID.
///
/// `0x2beb` Battery Health Information
///
/// The Battery Health Information characteristic is used to represent the health of a battery.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_health_information/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Cycle Count Designed Lifetime |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Represents the designed number of charge cycles supported by the device where one charge cycle is a discharge equivalent to the capacity of the battery at full charge in its current condition.
/// Unit is unitless with a resolution of 1.
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Min Designed Operating Temperature |
/// | **Type** | sint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Represents the minimum designed operating temperature of the battery.
/// Base Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// A raw value of 0x7F represents: Greater than 126.
/// A raw value of 0x80 represents: Less than -127.
/// Present if bit 1 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Max Designed Operating Temperature |
/// | **Type** | sint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Represents the maximum designed operating temperature of the battery.
/// Base Unit: org.bluetooth.unit.thermodynamic_temperature.degree_celsius
/// A raw value of 0x7F represents: Greater than 126.
/// A raw value of 0x80 represents: Less than -127.
/// Present if bit 1 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_health_information.yaml)
pub const BATTERY_HEALTH_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2beb);

/// Bluetooth characteristic UUID.
///
/// `0x2bec` Battery Information
///
/// The Battery Information characteristic is used to represent the physical characteristics of a battery in the context of the battery’s connection in a device.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_information/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Features |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// The supported features of the battery. See `sec:org.bluetooth.characteristic.battery_information/field/battery_features`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Manufacture Date |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Battery date of manufacture specified as days elapsed since the Epoch (Jan 1, 1970) in the Coordinated Universal Time (UTC) time zone.
/// Refer to the Date UTC characteristic in `sec:org.bluetooth.characteristic.date_utc`.
/// Base unit: org.bluetooth.unit.time.day
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Expiration Date |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Battery expiration date specified as days elapsed since the Epoch (Jan 1, 1970) in the Coordinated Universal Time (UTC) time zone.
/// Refer to the Date UTC characteristic in `sec:org.bluetooth.characteristic.date_utc`.
/// Base unit: org.bluetooth.unit.time.day
/// Present if bit 1 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Designed Capacity |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The capacity of the battery in kilowatt-hours at full charge in original (new) condition.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are all positive real numbers.
/// Present if bit 2 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Low Energy |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The battery energy value in kilowatt-hours when the battery is low.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are all positive real numbers.
/// Present if bit 3 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Critical Energy |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The battery energy value in kilowatt-hours when the battery is critical.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are all positive real numbers.
/// Present if bit 4 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Chemistry |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_information/field/battery_chemistry`.
/// Present if bit 5 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Nominal Voltage |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Nominal voltage of the battery in units of volts.
/// Base unit: org.bluetooth.unit.electric_potential_difference.volt
/// Allowed values are all real numbers.
/// Present if bit 6 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Aggregation Group |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Indicates the Battery Aggregation Group to which this instance of the battery service is associated.
/// 0: Not in an aggregation group
/// 1–254: Battery Aggregation Group Number
/// 255: RFU
/// Present if bit 7 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_information.yaml)
pub const BATTERY_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bec);

/// Bluetooth characteristic UUID.
///
/// `0x2bed` Battery Level Status
///
/// The Battery Level Status characteristic is used to represent the power state of a battery, an identifier used to identify the specific battery associated with the data, and the battery level.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_level_status/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Power State |
/// | **Type** | boolean16 |
/// | **Size** | 2 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_level_status/field/power_state`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Identifier |
/// | **Type** | uint16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// Used as an identifier for a service instance. Populated with a valid value from the GATT Bluetooth Namespace Descriptions \RefRef{assigned_numbers`.
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Battery Level |
/// | **Type** | uint8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Refer to the Battery Level characteristic in `sec:org.bluetooth.characteristic.battery_level`.
/// Present if bit 1 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Additional Status |
/// | **Type** | boolean8 |
/// | **Size** | 0 or 1 |
///
/// ### Description
///
/// Contains additional status information such as whether or not service is required.
/// See `sec:org.bluetooth.characteristic.battery_level_status/field/additional_status`.
/// Present if bit 2 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_level_status.yaml)
pub const BATTERY_LEVEL_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2bed);

/// Bluetooth characteristic UUID.
///
/// `0x2bee` Battery Time Status
///
/// The Battery Time Status characteristic is used to represent time estimates for discharging and charging.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_time_status/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time until Discharged |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Estimated time in minutes until discharged.
/// Base unit: org.bluetooth.unit.time.minute
/// A value of 0xFFFFFF represents: Unknown
/// A value of 0xFFFFFE represents: Greater than 0xFFFFFD
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time until Discharged on Standby |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Estimated time in minutes until discharged assuming for the remaining time the device is in standby.
/// Base unit: org.bluetooth.unit.time.minute
/// A value of 0xFFFFFF represents: Unknown
/// A value of 0xFFFFFE: represents: Greater than 0xFFFFFD
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Time until Recharged |
/// | **Type** | uint24 |
/// | **Size** | 0 or 3 |
///
/// ### Description
///
/// Estimated time in minutes until recharged.
/// Base unit: org.bluetooth.unit.time.minute
/// A value of 0xFFFFFF represents: Unknown
/// A value of 0xFFFFFE represents: Greater than 0xFFFFFD
/// Present if bit 1 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_time_status.yaml)
pub const BATTERY_TIME_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2bee);

/// Bluetooth characteristic UUID.
///
/// `0x2bef` Estimated Service Date
///
/// The Estimated Service Date characteristic is used to represent the estimated date when replacement or servicing is required.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Estimated Service Date |
/// | **Type** | uint24 |
/// | **Size** | 3 |
///
/// ### Description
///
/// Estimated service date specified as days elapsed since the Epoch (Jan 1, 1970) in the Coordinated Universal Time (UTC) time zone.
/// Refer to the Date UTC characteristic in `sec:org.bluetooth.characteristic.date_utc`.
/// Base unit: org.bluetooth.unit.time.day
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.estimated_service_date.yaml)
pub const ESTIMATED_SERVICE_DATE: BluetoothUuid16 = BluetoothUuid16::new(0x2bef);

/// Bluetooth characteristic UUID.
///
/// `0x2bf0` Battery Energy Status
///
/// The Battery Energy Status characteristic is used to represent details about the energy status of the battery.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Flags |
/// | **Type** | boolean8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// See `sec:org.bluetooth.characteristic.battery_energy_status/field/flags`.
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | External Source Power |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The total power being consumed from an external power source in watts for its Battery Aggregation Group.
/// Base unit: org.bluetooth.unit.power.watt
/// Allowed values are 0 and all positive real numbers.
/// Present if bit 0 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Present Voltage |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The present terminal voltage of the battery in volts.
/// Base unit: org.bluetooth.unit.electric_potential_difference.volt
/// Allowed values are all real numbers.
/// Present if bit 1 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Available Energy |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The available energy of the battery in kilowatt-hours in its current charge state.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are 0 and all positive real numbers.
/// Present if bit 2 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Available Battery Capacity |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The capacity of the battery in kilowatt-hours at full charge in its current condition.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are 0 and all positive real numbers.
/// Present if bit 3 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Charge Rate |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The energy flowing into the battery in watts. Positive values indicate charging, and negative values indicate discharging.
/// Base unit: org.bluetooth.unit.power.watt
/// Allowed values are all real numbers.
/// Present if bit 4 of the Flags field is set to 1
///
/// ----///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Available Energy at Last Charge |
/// | **Type** | medfloat16 |
/// | **Size** | 0 or 2 |
///
/// ### Description
///
/// The available energy of the battery in kilowatt-hours in its last charge state.
/// Base unit: org.bluetooth.unit.energy.kilowatt_hour
/// Allowed values are 0 and all positive real numbers.
/// Present if bit 5 of the Flags field is set to 1
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.battery_energy_status.yaml)
pub const BATTERY_ENERGY_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2bf0);

/// Bluetooth characteristic UUID.
///
/// `0x2bf1` Observation Schedule Changed
pub const OBSERVATION_SCHEDULE_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2bf1);

/// Bluetooth characteristic UUID.
///
/// `0x2bf2` Current Elapsed Time
pub const CURRENT_ELAPSED_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2bf2);

/// Bluetooth characteristic UUID.
///
/// `0x2bf3` Health Sensor Features
pub const HEALTH_SENSOR_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2bf3);

/// Bluetooth characteristic UUID.
///
/// `0x2bf4` GHS Control Point
pub const GHS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bf4);

/// Bluetooth characteristic UUID.
///
/// `0x2bf5` LE GATT Security Levels
pub const LE_GATT_SECURITY_LEVELS: BluetoothUuid16 = BluetoothUuid16::new(0x2bf5);

/// Bluetooth characteristic UUID.
///
/// `0x2bf6` ESL Address
pub const ESL_ADDRESS: BluetoothUuid16 = BluetoothUuid16::new(0x2bf6);

/// Bluetooth characteristic UUID.
///
/// `0x2bf7` AP Sync Key Material
pub const AP_SYNC_KEY_MATERIAL: BluetoothUuid16 = BluetoothUuid16::new(0x2bf7);

/// Bluetooth characteristic UUID.
///
/// `0x2bf8` ESL Response Key Material
pub const ESL_RESPONSE_KEY_MATERIAL: BluetoothUuid16 = BluetoothUuid16::new(0x2bf8);

/// Bluetooth characteristic UUID.
///
/// `0x2bf9` ESL Current Absolute Time
pub const ESL_CURRENT_ABSOLUTE_TIME: BluetoothUuid16 = BluetoothUuid16::new(0x2bf9);

/// Bluetooth characteristic UUID.
///
/// `0x2bfa` ESL Display Information
pub const ESL_DISPLAY_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bfa);

/// Bluetooth characteristic UUID.
///
/// `0x2bfb` ESL Image Information
pub const ESL_IMAGE_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bfb);

/// Bluetooth characteristic UUID.
///
/// `0x2bfc` ESL Sensor Information
pub const ESL_SENSOR_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bfc);

/// Bluetooth characteristic UUID.
///
/// `0x2bfd` ESL LED Information
pub const ESL_LED_INFORMATION: BluetoothUuid16 = BluetoothUuid16::new(0x2bfd);

/// Bluetooth characteristic UUID.
///
/// `0x2bfe` ESL Control Point
pub const ESL_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2bfe);

/// Bluetooth characteristic UUID.
///
/// `0x2bff` UDI for Medical Devices
pub const UDI_FOR_MEDICAL_DEVICES: BluetoothUuid16 = BluetoothUuid16::new(0x2bff);

/// Bluetooth characteristic UUID.
///
/// `0x2c00` GMAP Role
pub const GMAP_ROLE: BluetoothUuid16 = BluetoothUuid16::new(0x2c00);

/// Bluetooth characteristic UUID.
///
/// `0x2c01` UGG Features
pub const UGG_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2c01);

/// Bluetooth characteristic UUID.
///
/// `0x2c02` UGT Features
pub const UGT_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2c02);

/// Bluetooth characteristic UUID.
///
/// `0x2c03` BGS Features
pub const BGS_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2c03);

/// Bluetooth characteristic UUID.
///
/// `0x2c04` BGR Features
pub const BGR_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2c04);

/// Bluetooth characteristic UUID.
///
/// `0x2c05` Percentage 8 Steps
///
/// The Percentage 8 Steps characteristic is used to represent a number of steps between 0% and 100% when configuring a Percentage 8 characteristic value (see `sec:org.bluetooth.characteristic.percentage_8`).
/// For example:
/// \begin{itemize`
/// \item A value of 1 represents one step: 0% to 100% in one 100% step.
/// \item A value of 5 represents five steps: 0% to 100% in five 20% steps.
/// \item A value of 200 represents 200 steps: 0% to 100% in 200 0.5% steps.
/// \end{itemize`
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Percentage 8 Steps |
/// | **Type** | uint8 |
/// | **Size** | 1 |
///
/// ### Description
///
/// Unit is the number of steps from the minimum to the maximum value.
/// Minimum: 1
/// Maximum: 200
/// Represented values: M = 1, d = 0, b = 0
/// Unit: org.bluetooth.unit.unitless
/// A value of 0xFF represents "value is not known".
/// All other values are Prohibited.
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.percentage_8_steps.yaml)
pub const PERCENTAGE_8_STEPS: BluetoothUuid16 = BluetoothUuid16::new(0x2c05);

/// Bluetooth characteristic UUID.
///
/// `0x2c06` Acceleration
///
/// The Acceleration characteristic is used to represent the acceleration of an object along a given axis as determined by the service.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Acceleration |
/// | **Type** | sint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit:
/// org.bluetooth.unit.acceleration.metres_per_seconds_squared
/// Represented values: M = 1, d = -3, b = 0
/// Unit is meter per second squared with a resolution of 1mm per second squared.
/// A value of 0x7FFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.acceleration.yaml)
pub const ACCELERATION: BluetoothUuid16 = BluetoothUuid16::new(0x2c06);

/// Bluetooth characteristic UUID.
///
/// `0x2c07` Force
///
/// The Force characteristic is used to represent the force being applied to an object along a given axis.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Force |
/// | **Type** | sint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.force.newton
/// Represented values: M = 1, d = -3, b = 0
/// Unit is Newton with a resolution of 1/1000 N (1 mN).
/// A value of 0x7FFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.force.yaml)
pub const FORCE: BluetoothUuid16 = BluetoothUuid16::new(0x2c07);

/// Bluetooth characteristic UUID.
///
/// `0x2c08` Linear Position
///
/// The Linear Position characteristic is used to represent the linear position of an object along a given axis and referencing to the device-specific zero point.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Linear Position |
/// | **Type** | sint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = - 7, b = 0
/// Unit is meter with a resolution of 1/10000000 m (100 nm).
/// A value of 0x7FFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.linear_position.yaml)
pub const LINEAR_POSITION: BluetoothUuid16 = BluetoothUuid16::new(0x2c08);

/// Bluetooth characteristic UUID.
///
/// `0x2c09` Rotational Speed
///
/// The Rotational Speed characteristic is used to represent the rotational speed of an object rotating around a device-specific axis.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Rotational Speed |
/// | **Type** | sint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit:
/// org.bluetooth.unit.rotational_speed.revolutions_per_minute
/// Represented values: M = 1, d = 0, b = 0
/// Unit is revolutions per minute (RPM) with a resolution of 1 RPM.
/// Negative values indicate counter-clockwise rotation.
/// Positive values indicate clockwise rotation.
/// A value of 0x7FFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.rotational_speed.yaml)
pub const ROTATIONAL_SPEED: BluetoothUuid16 = BluetoothUuid16::new(0x2c09);

/// Bluetooth characteristic UUID.
///
/// `0x2c0a` Length
///
/// The Length characteristic is used to represent the measured dimension of an object along a given axis.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Length |
/// | **Type** | uint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.length.metre
/// Represented values: M = 1, d = - 7, b = 0
/// Unit is meters with a resolution of 1/10000000 m (100 nm).
/// A value of 0xFFFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.length.yaml)
pub const LENGTH: BluetoothUuid16 = BluetoothUuid16::new(0x2c0a);

/// Bluetooth characteristic UUID.
///
/// `0x2c0b` Torque
///
/// The Torque characteristic is used to represent the measured magnitude of torque (or moment of force) around a device-specific axis.
///
/// ----
/// ## Structure
///
/// ### Data Type
///
/// |  |  |
/// |---|---|
/// | **Field** | Torque |
/// | **Type** | sint32 |
/// | **Size** | 4 |
///
/// ### Description
///
/// Base Unit: org.bluetooth.unit.moment_of_force.newton_metre
/// Represented values: M = 1, d = - 2, b = 0
/// Unit is Newton meters with a resolution of 0.01 Nm.
/// Torque is positive when the force is applied in the clockwise direction around the given axis.
/// A value of 0x7FFFFFFF represents "value is not known".
///
/// ----
///
/// [more information](https://bitbucket.org/bluetooth-SIG/public/src/main/gss/org.bluetooth.characteristic.torque.yaml)
pub const TORQUE: BluetoothUuid16 = BluetoothUuid16::new(0x2c0b);

/// Bluetooth characteristic UUID.
///
/// `0x2c0c` IMD Status
pub const IMD_STATUS: BluetoothUuid16 = BluetoothUuid16::new(0x2c0c);

/// Bluetooth characteristic UUID.
///
/// `0x2c0d` IMDS Descriptor Value Changed
pub const IMDS_DESCRIPTOR_VALUE_CHANGED: BluetoothUuid16 = BluetoothUuid16::new(0x2c0d);

/// Bluetooth characteristic UUID.
///
/// `0x2c0e` First Use Date
pub const FIRST_USE_DATE: BluetoothUuid16 = BluetoothUuid16::new(0x2c0e);

/// Bluetooth characteristic UUID.
///
/// `0x2c0f` Life Cycle Data
pub const LIFE_CYCLE_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c0f);

/// Bluetooth characteristic UUID.
///
/// `0x2c10` Work Cycle Data
pub const WORK_CYCLE_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c10);

/// Bluetooth characteristic UUID.
///
/// `0x2c11` Service Cycle Data
pub const SERVICE_CYCLE_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c11);

/// Bluetooth characteristic UUID.
///
/// `0x2c12` IMD Control
pub const IMD_CONTROL: BluetoothUuid16 = BluetoothUuid16::new(0x2c12);

/// Bluetooth characteristic UUID.
///
/// `0x2c13` IMD Historical Data
pub const IMD_HISTORICAL_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c13);

/// Bluetooth characteristic UUID.
///
/// `0x2c14` RAS Features
pub const RAS_FEATURES: BluetoothUuid16 = BluetoothUuid16::new(0x2c14);

/// Bluetooth characteristic UUID.
///
/// `0x2c15` Real-time Ranging Data
pub const REAL_TIME_RANGING_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c15);

/// Bluetooth characteristic UUID.
///
/// `0x2c16` On-demand Ranging Data
pub const ON_DEMAND_RANGING_DATA: BluetoothUuid16 = BluetoothUuid16::new(0x2c16);

/// Bluetooth characteristic UUID.
///
/// `0x2c17` RAS Control Point
pub const RAS_CONTROL_POINT: BluetoothUuid16 = BluetoothUuid16::new(0x2c17);

/// Bluetooth characteristic UUID.
///
/// `0x2c18` Ranging Data Ready
pub const RANGING_DATA_READY: BluetoothUuid16 = BluetoothUuid16::new(0x2c18);

/// Bluetooth characteristic UUID.
///
/// `0x2c19` Ranging Data Overwritten
pub const RANGING_DATA_OVERWRITTEN: BluetoothUuid16 = BluetoothUuid16::new(0x2c19);
