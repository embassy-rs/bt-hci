//! UUIDs for the protocol identifiers module.

// This file is auto-generated by the update_uuids application.
// Based on https://bitbucket.org/bluetooth-SIG/public.git
// Commit hash: 22c4a7a751fe51de707be6d294adb0d115e86897

use super::BluetoothUuid16;

/// Bluetooth protocol identifiers UUID.
///
/// `0x0001` SDP
pub const SDP: BluetoothUuid16 = BluetoothUuid16::new(0x1);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0002` UDP
pub const UDP: BluetoothUuid16 = BluetoothUuid16::new(0x2);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0003` RFCOMM
pub const RFCOMM: BluetoothUuid16 = BluetoothUuid16::new(0x3);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0004` TCP
pub const TCP: BluetoothUuid16 = BluetoothUuid16::new(0x4);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0005` TCS-BIN
pub const TCS_BIN: BluetoothUuid16 = BluetoothUuid16::new(0x5);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0006` TCS-AT
pub const TCS_AT: BluetoothUuid16 = BluetoothUuid16::new(0x6);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0007` ATT
pub const ATT: BluetoothUuid16 = BluetoothUuid16::new(0x7);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0008` OBEX
pub const OBEX: BluetoothUuid16 = BluetoothUuid16::new(0x8);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0009` IP
pub const IP: BluetoothUuid16 = BluetoothUuid16::new(0x9);

/// Bluetooth protocol identifiers UUID.
///
/// `0x000a` FTP
pub const FTP: BluetoothUuid16 = BluetoothUuid16::new(0xa);

/// Bluetooth protocol identifiers UUID.
///
/// `0x000c` HTTP
pub const HTTP: BluetoothUuid16 = BluetoothUuid16::new(0xc);

/// Bluetooth protocol identifiers UUID.
///
/// `0x000e` WSP
pub const WSP: BluetoothUuid16 = BluetoothUuid16::new(0xe);

/// Bluetooth protocol identifiers UUID.
///
/// `0x000f` BNEP
pub const BNEP: BluetoothUuid16 = BluetoothUuid16::new(0xf);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0010` UPNP
pub const UPNP: BluetoothUuid16 = BluetoothUuid16::new(0x10);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0011` HID Protocol
pub const HID_PROTOCOL: BluetoothUuid16 = BluetoothUuid16::new(0x11);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0012` HardcopyControlChannel
pub const HARDCOPY_CONTROL_CHANNEL: BluetoothUuid16 = BluetoothUuid16::new(0x12);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0014` HardcopyDataChannel
pub const HARDCOPY_DATA_CHANNEL: BluetoothUuid16 = BluetoothUuid16::new(0x14);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0016` HardcopyNotificationChannel
pub const HARDCOPY_NOTIFICATION_CHANNEL: BluetoothUuid16 = BluetoothUuid16::new(0x16);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0017` AVCTP
pub const AVCTP: BluetoothUuid16 = BluetoothUuid16::new(0x17);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0019` AVDTP
pub const AVDTP: BluetoothUuid16 = BluetoothUuid16::new(0x19);

/// Bluetooth protocol identifiers UUID.
///
/// `0x001b` CMTP
pub const CMTP: BluetoothUuid16 = BluetoothUuid16::new(0x1b);

/// Bluetooth protocol identifiers UUID.
///
/// `0x001e` MCAP Control Channel
pub const MCAP_CONTROL_CHANNEL: BluetoothUuid16 = BluetoothUuid16::new(0x1e);

/// Bluetooth protocol identifiers UUID.
///
/// `0x001f` MCAP Data Channel
pub const MCAP_DATA_CHANNEL: BluetoothUuid16 = BluetoothUuid16::new(0x1f);

/// Bluetooth protocol identifiers UUID.
///
/// `0x0100` L2CAP
pub const L2_CAP: BluetoothUuid16 = BluetoothUuid16::new(0x100);
